V$(function() {\u000a    function PrinterProfilesViewModel() {\u000a        var self = this;\u000a\u000a        self._cleanProfile = function() {\u000a            return {\u000a                id: "",\u000a                name: "",\u000a                model: "",\u000a                color: "default",\u000a                volume: {\u000a                    formFactor: "rectangular",\u000a                    width: 200,\u000a                    depth: 200,\u000a                    height: 200,\u000a                    origin: "lowerleft"\u000a                },\u000a                heatedBed: true,\u000a                axes: {\u000a                    x: {speed: 6000, inverted: false},\u000a                    y: {speed: 6000, inverted: false},\u000a                    z: {speed: 200, inverted: false},\u000a                    e: {speed: 300, inverted: false}\u000a                },\u000a                extruder: {\u000a                    count: 1,\u000a                    offsets: [\u000a                        [0,0]\u000a                    ],\u000a                    nozzleDiameter: 0.4\u000a                }\u000a            }\u000a        };\u000a\u000a        self.requestInProgress = ko.observable(false);\u000a\u000a        self.profiles = new ItemListHelper(\u000a            "printerProfiles",\u000a            {\u000a                "name": function(a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase()) return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "name",\u000a            [],\u000a            [],\u000a            10\u000a        );\u000a        self.defaultProfile = ko.observable();\u000a        self.currentProfile = ko.observable();\u000a\u000a        self.currentProfileData = ko.observable(ko.mapping.fromJS(self._cleanProfile()));\u000a\u000a        self.editorNew = ko.observable(false);\u000a\u000a        self.editorName = ko.observable();\u000a        self.editorColor = ko.observable();\u000a        self.editorIdentifier = ko.observable();\u000a        self.editorIdentifierPlaceholder = ko.observable();\u000a        self.editorModel = ko.observable();\u000a\u000a        self.editorVolumeWidth = ko.observable();\u000a        self.editorVolumeDepth = ko.observable();\u000a        self.editorVolumeHeight = ko.observable();\u000a        self.editorVolumeFormFactor = ko.observable();\u000a        self.editorVolumeOrigin = ko.observable();\u000a\u000a        self.editorVolumeFormFactor.subscribe(function(value) {\u000a            if (value == "circular") {\u000a                self.editorVolumeOrigin("center");\u000a            }\u000a        });\u000a\u000a        self.editorHeatedBed = ko.observable();\u000a\u000a        self.editorNozzleDiameter = ko.observable();\u000a        self.editorExtruders = ko.observable();\u000a        self.editorExtruderOffsets = ko.observableArray();\u000a\u000a        self.editorAxisXSpeed = ko.observable();\u000a        self.editorAxisYSpeed = ko.observable();\u000a        self.editorAxisZSpeed = ko.observable();\u000a        self.editorAxisESpeed = ko.observable();\u000a\u000a        self.editorAxisXInverted = ko.observable(false);\u000a        self.editorAxisYInverted = ko.observable(false);\u000a        self.editorAxisZInverted = ko.observable(false);\u000a        self.editorAxisEInverted = ko.observable(false);\u000a\u000a        self.availableColors = ko.observable([\u000a            {key: "default", name: gettext("default")},\u000a            {key: "red", name: gettext("red")},\u000a            {key: "orange", name: gettext("orange")},\u000a            {key: "yellow", name: gettext("yellow")},\u000a            {key: "green", name: gettext("green")},\u000a            {key: "blue", name: gettext("blue")},\u000a            {key: "black", name: gettext("black")}\u000a        ]);\u000a\u000a        self.availableOrigins = ko.pureComputed(function() {\u000a            var formFactor = self.editorVolumeFormFactor();\u000a\u000a            var possibleOrigins = {\u000a                "lowerleft": gettext("Lower Left"),\u000a                "center": gettext("Center")\u000a            };\u000a\u000a            var keys = [];\u000a            if (formFactor == "rectangular") {\u000a                keys = ["lowerleft", "center"];\u000a            } else if (formFactor == "circular") {\u000a                keys = ["center"];\u000a            }\u000a\u000a            var result = [];\u000a            _.each(keys, function(key) {\u000a               result.push({key: key, name: possibleOrigins[key]});\u000a            });\u000a            return result;\u000a        });\u000a\u000a        self.koEditorExtruderOffsets = ko.pureComputed(function() {\u000a            var extruderOffsets = self.editorExtruderOffsets();\u000a            var numExtruders = self.editorExtruders();\u000a            if (!numExtruders) {\u000a                numExtruders = 1;\u000a            }\u000a\u000a            if (numExtruders - 1 > extruderOffsets.length) {\u000a                for (var i = extruderOffsets.length; i < numExtruders; i++) {\u000a                    extruderOffsets[i] = {\u000a                        idx: i + 1,\u000a                        x: ko.observable(0),\u000a                        y: ko.observable(0)\u000a                    }\u000a                }\u000a                self.editorExtruderOffsets(extruderOffsets);\u000a            }\u000a\u000a            return extruderOffsets.slice(0, numExtruders - 1);\u000a        });\u000a\u000a        self.editorNameInvalid = ko.pureComputed(function() {\u000a            return !self.editorName();\u000a        });\u000a\u000a        self.editorIdentifierInvalid = ko.pureComputed(function() {\u000a            var identifier = self.editorIdentifier();\u000a            var placeholder = self.editorIdentifierPlaceholder();\u000a            var data = identifier;\u000a            if (!identifier) {\u000a                data = placeholder;\u000a            }\u000a\u000a            var validCharacters = (data && (data == self._sanitize(data)));\u000a\u000a            var existingProfile = self.profiles.getItem(function(item) {return item.id == data});\u000a            return !data || !validCharacters || (self.editorNew() && existingProfile != undefined);\u000a        });\u000a\u000a        self.editorIdentifierInvalidText = ko.pureComputed(function() {\u000a            if (!self.editorIdentifierInvalid()) {\u000a                return "";\u000a            }\u000a\u000a            if (!self.editorIdentifier() && !self.editorIdentifierPlaceholder()) {\u000a                return gettext("Identifier must be set");\u000a            } else if (self.editorIdentifier() != self._sanitize(self.editorIdentifier())) {\u000a                return gettext("Invalid characters, only a-z, A-Z, 0-9, -, ., _, ( and ) are allowed")\u000a            } else {\u000a                return gettext("A profile with such an identifier already exists");\u000a            }\u000a        });\u000a\u000a        self.enableEditorSubmitButton = ko.pureComputed(function() {\u000a            return !self.editorNameInvalid() && !self.editorIdentifierInvalid() && !self.requestInProgress();\u000a        });\u000a\u000a        self.editorName.subscribe(function() {\u000a            self.editorIdentifierPlaceholder(self._sanitize(self.editorName()).toLowerCase());\u000a        });\u000a\u000a        self.makeDefault = function(data) {\u000a            var profile = {\u000a                id: data.id,\u000a                default: true\u000a            };\u000a\u000a            self.updateProfile(profile);\u000a        };\u000a\u000a        self.requestData = function() {\u000a            $.ajax({\u000a                url: API_BASEURL + "printerprofiles",\u000a                type: "GET",\u000a                dataType: "json",\u000a                success: self.fromResponse\u000a            })\u000a        };\u000a\u000a        self.fromResponse = function(data) {\u000a            var items = [];\u000a            var defaultProfile = undefined;\u000a            var currentProfile = undefined;\u000a            var currentProfileData = undefined;\u000a            _.each(data.profiles, function(entry) {\u000a                if (entry.default) {\u000a                    defaultProfile = entry.id;\u000a                }\u000a                if (entry.current) {\u000a                    currentProfile = entry.id;\u000a                    currentProfileData = ko.mapping.fromJS(entry, self.currentProfileData);\u000a                }\u000a                entry["isdefault"] = ko.observable(entry.default);\u000a                entry["iscurrent"] = ko.observable(entry.current);\u000a                items.push(entry);\u000a            });\u000a            self.profiles.updateItems(items);\u000a            self.defaultProfile(defaultProfile);\u000a            self.currentProfile(currentProfile);\u000a            self.currentProfileData(currentProfileData);\u000a        };\u000a\u000a        self.addProfile = function(callback) {\u000a            var profile = self._editorData();\u000a            self.requestInProgress(true);\u000a            $.ajax({\u000a                url: API_BASEURL + "printerprofiles",\u000a                type: "POST",\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                data: JSON.stringify({profile: profile}),\u000a                success: function() {\u000a                    self.requestInProgress(false);\u000a                    if (callback !== undefined) {\u000a                        callback();\u000a                    }\u000a                    self.requestData();\u000a                },\u000a                error: function() {\u000a                    self.requestInProgress(false);\u000a                    var text = gettext("There was unexpected error while saving the printer profile, please consult the logs.");\u000a                    new PNotify({title: gettext("Saving failed"), text: text, type: "error", hide: false});\u000a                }\u000a            });\u000a        };\u000a\u000a        self.removeProfile = function(data) {\u000a            self.requestInProgress(true);\u000a            $.ajax({\u000a                url: data.resource,\u000a                type: "DELETE",\u000a                dataType: "json",\u000a                success: function() {\u000a                    self.requestInProgress(false);\u000a                    self.requestData();\u000a                },\u000a                error: function() {\u000a                    self.requestInProgress(false);\u000a                    var text = gettext("There was unexpected error while removing the printer profile, please consult the logs.");\u000a                    new PNotify({title: gettext("Saving failed"), text: text, type: "error", hide: false});\u000a                }\u000a            })\u000a        };\u000a\u000a        self.updateProfile = function(profile, callback) {\u000a            if (profile == undefined) {\u000a                profile = self._editorData();\u000a            }\u000a\u000a            self.requestInProgress(true);\u000a\u000a            $.ajax({\u000a                url: API_BASEURL + "printerprofiles/" + profile.id,\u000a                type: "PATCH",\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                data: JSON.stringify({profile: profile}),\u000a                success: function() {\u000a                    self.requestInProgress(false);\u000a                    if (callback !== undefined) {\u000a                        callback();\u000a                    }\u000a                    self.requestData();\u000a                },\u000a                error: function() {\u000a                    self.requestInProgress(false);\u000a                    var text = gettext("There was unexpected error while updating the printer profile, please consult the logs.");\u000a                    new PNotify({title: gettext("Saving failed"), text: text, type: "error", hide: false});\u000a                }\u000a            });\u000a        };\u000a\u000a        self.showEditProfileDialog = function(data) {\u000a            var add = false;\u000a            if (data == undefined) {\u000a                data = self._cleanProfile();\u000a                add = true;\u000a            }\u000a\u000a            self.editorNew(add);\u000a\u000a            self.editorIdentifier(data.id);\u000a            self.editorName(data.name);\u000a            self.editorColor(data.color);\u000a            self.editorModel(data.model);\u000a\u000a            self.editorVolumeWidth(data.volume.width);\u000a            self.editorVolumeDepth(data.volume.depth);\u000a            self.editorVolumeHeight(data.volume.height);\u000a            self.editorVolumeFormFactor(data.volume.formFactor);\u000a            self.editorVolumeOrigin(data.volume.origin);\u000a\u000a            self.editorHeatedBed(data.heatedBed);\u000a\u000a            self.editorNozzleDiameter(data.extruder.nozzleDiameter);\u000a            self.editorExtruders(data.extruder.count);\u000a            var offsets = [];\u000a            if (data.extruder.count > 1) {\u000a                _.each(_.slice(data.extruder.offsets, 1), function(offset, index) {\u000a                    offsets.push({\u000a                        idx: index + 1,\u000a                        x: ko.observable(offset[0]),\u000a                        y: ko.observable(offset[1])\u000a                    });\u000a                });\u000a            }\u000a            self.editorExtruderOffsets(offsets);\u000a\u000a            self.editorAxisXSpeed(data.axes.x.speed);\u000a            self.editorAxisXInverted(data.axes.x.inverted);\u000a            self.editorAxisYSpeed(data.axes.y.speed);\u000a            self.editorAxisYInverted(data.axes.y.inverted);\u000a            self.editorAxisZSpeed(data.axes.z.speed);\u000a            self.editorAxisZInverted(data.axes.z.inverted);\u000a            self.editorAxisESpeed(data.axes.e.speed);\u000a            self.editorAxisEInverted(data.axes.e.inverted);\u000a\u000a            var editDialog = $("#settings_printerProfiles_editDialog");\u000a            var confirmButton = $("button.btn-confirm", editDialog);\u000a            var dialogTitle = $("h3.modal-title", editDialog);\u000a\u000a            dialogTitle.text(add ? gettext("Add Printer Profile") : _.sprintf(gettext("Edit Printer Profile \u005c"%(name)s\u005c""), {name: data.name}));\u000a            confirmButton.unbind("click");\u000a            confirmButton.bind("click", function() {\u000a                if (self.enableEditorSubmitButton()) {\u000a                    self.confirmEditProfile(add);\u000a                }\u000a            });\u000a            editDialog.modal("show");\u000a        };\u000a\u000a        self.confirmEditProfile = function(add) {\u000a            var callback = function() {\u000a                $("#settings_printerProfiles_editDialog").modal("hide");\u000a            };\u000a\u000a            if (add) {\u000a                self.addProfile(callback);\u000a            } else {\u000a                self.updateProfile(undefined, callback);\u000a            }\u000a        };\u000a\u000a        self._editorData = function() {\u000a            var identifier = self.editorIdentifier();\u000a            if (!identifier) {\u000a                identifier = self.editorIdentifierPlaceholder();\u000a            }\u000a\u000a            var profile = {\u000a                id: identifier,\u000a                name: self.editorName(),\u000a                color: self.editorColor(),\u000a                model: self.editorModel(),\u000a                volume: {\u000a                    width: parseFloat(self.editorVolumeWidth()),\u000a                    depth: parseFloat(self.editorVolumeDepth()),\u000a                    height: parseFloat(self.editorVolumeHeight()),\u000a                    formFactor: self.editorVolumeFormFactor(),\u000a                    origin: self.editorVolumeOrigin()\u000a                },\u000a                heatedBed: self.editorHeatedBed(),\u000a                extruder: {\u000a                    count: parseInt(self.editorExtruders()),\u000a                    offsets: [\u000a                        [0.0, 0.0]\u000a                    ],\u000a                    nozzleDiameter: parseFloat(self.editorNozzleDiameter())\u000a                },\u000a                axes: {\u000a                    x: {\u000a                        speed: parseInt(self.editorAxisXSpeed()),\u000a                        inverted: self.editorAxisXInverted()\u000a                    },\u000a                    y: {\u000a                        speed: parseInt(self.editorAxisYSpeed()),\u000a                        inverted: self.editorAxisYInverted()\u000a                    },\u000a                    z: {\u000a                        speed: parseInt(self.editorAxisZSpeed()),\u000a                        inverted: self.editorAxisZInverted()\u000a                    },\u000a                    e: {\u000a                        speed: parseInt(self.editorAxisESpeed()),\u000a                        inverted: self.editorAxisEInverted()\u000a                    }\u000a                }\u000a            };\u000a\u000a            if (self.editorExtruders() > 1) {\u000a                for (var i = 0; i < self.editorExtruders() - 1; i++) {\u000a                    var offset = [0.0, 0.0];\u000a                    if (i < self.editorExtruderOffsets().length) {\u000a                        try {\u000a                            offset = [parseFloat(self.editorExtruderOffsets()[i]["x"]()), parseFloat(self.editorExtruderOffsets()[i]["y"]())];\u000a                        } catch (exc) {\u000a                            log.error("Invalid offset in profile", identifier, "for extruder", i+1, ":", self.editorExtruderOffsets()[i]["x"], ",", self.editorExtruderOffsets()[i]["y"]);\u000a                        }\u000a                    }\u000a                    profile.extruder.offsets.push(offset);\u000a                }\u000a            }\u000a\u000a            return profile;\u000a        };\u000a\u000a        self._sanitize = function(name) {\u000a            return name.replace(/[^a-zA-Z0-9\u005c-_\u005c.\u005c(\u005c) ]/g, "").replace(/ /g, "_");\u000a        };\u000a\u000a        self.onSettingsShown = self.requestData;\u000a        self.onStartup = self.requestData;\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        PrinterProfilesViewModel,\u000a        [],\u000a        []\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.