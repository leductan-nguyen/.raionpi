V$(function() {\u000a    function PrinterStateViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a\u000a        self.stateString = ko.observable(undefined);\u000a        self.isErrorOrClosed = ko.observable(undefined);\u000a        self.isOperational = ko.observable(undefined);\u000a        self.isPrinting = ko.observable(undefined);\u000a        self.isPaused = ko.observable(undefined);\u000a        self.isError = ko.observable(undefined);\u000a        self.isReady = ko.observable(undefined);\u000a        self.isLoading = ko.observable(undefined);\u000a        self.isSdReady = ko.observable(undefined);\u000a\u000a        self.enablePrint = ko.pureComputed(function() {\u000a            return self.isOperational() && self.isReady() && !self.isPrinting() && self.loginState.isUser() && self.filename() != undefined;\u000a        });\u000a        self.enablePause = ko.pureComputed(function() {\u000a            return self.isOperational() && (self.isPrinting() || self.isPaused()) && self.loginState.isUser();\u000a        });\u000a        self.enableCancel = ko.pureComputed(function() {\u000a            return self.isOperational() && (self.isPrinting() || self.isPaused()) && self.loginState.isUser();\u000a        });\u000a\u000a        self.filename = ko.observable(undefined);\u000a        self.progress = ko.observable(undefined);\u000a        self.filesize = ko.observable(undefined);\u000a        self.filepos = ko.observable(undefined);\u000a        self.printTime = ko.observable(undefined);\u000a        self.printTimeLeft = ko.observable(undefined);\u000a        self.sd = ko.observable(undefined);\u000a        self.timelapse = ko.observable(undefined);\u000a\u000a        self.busyFiles = ko.observableArray([]);\u000a\u000a        self.filament = ko.observableArray([]);\u000a        self.estimatedPrintTime = ko.observable(undefined);\u000a        self.lastPrintTime = ko.observable(undefined);\u000a\u000a        self.currentHeight = ko.observable(undefined);\u000a\u000a        self.TITLE_PRINT_BUTTON_PAUSED = gettext("Restarts the print job from the beginning");\u000a        self.TITLE_PRINT_BUTTON_UNPAUSED = gettext("Starts the print job");\u000a        self.TITLE_PAUSE_BUTTON_PAUSED = gettext("Resumes the print job");\u000a        self.TITLE_PAUSE_BUTTON_UNPAUSED = gettext("Pauses the print job");\u000a\u000a        self.titlePrintButton = ko.observable(self.TITLE_PRINT_BUTTON_UNPAUSED);\u000a        self.titlePauseButton = ko.observable(self.TITLE_PAUSE_BUTTON_UNPAUSED);\u000a\u000a        self.estimatedPrintTimeString = ko.pureComputed(function() {\u000a            if (self.lastPrintTime())\u000a                return formatDuration(self.lastPrintTime());\u000a            if (self.estimatedPrintTime())\u000a                return formatDuration(self.estimatedPrintTime());\u000a            return "-";\u000a        });\u000a        self.byteString = ko.pureComputed(function() {\u000a            if (!self.filesize())\u000a                return "-";\u000a            var filepos = self.filepos() ? formatSize(self.filepos()) : "-";\u000a            return filepos + " / " + formatSize(self.filesize());\u000a        });\u000a        self.heightString = ko.pureComputed(function() {\u000a            if (!self.currentHeight())\u000a                return "-";\u000a            return _.sprintf("%.02fmm", self.currentHeight());\u000a        });\u000a        self.printTimeString = ko.pureComputed(function() {\u000a            if (!self.printTime())\u000a                return "-";\u000a            return formatDuration(self.printTime());\u000a        });\u000a        self.printTimeLeftString = ko.pureComputed(function() {\u000a            if (self.printTimeLeft() == undefined) {\u000a                if (!self.printTime() || !(self.isPrinting() || self.isPaused())) {\u000a                    return "-";\u000a                } else {\u000a                    return gettext("Calculating...");\u000a                }\u000a            } else {\u000a                return formatFuzzyEstimation(self.printTimeLeft());\u000a            }\u000a        });\u000a        self.progressString = ko.pureComputed(function() {\u000a            if (!self.progress())\u000a                return 0;\u000a            return self.progress();\u000a        });\u000a        self.pauseString = ko.pureComputed(function() {\u000a            if (self.isPaused())\u000a                return gettext("Continue");\u000a            else\u000a                return gettext("Pause");\u000a        });\u000a\u000a        self.timelapseString = ko.pureComputed(function() {\u000a            var timelapse = self.timelapse();\u000a\u000a            if (!timelapse || !timelapse.hasOwnProperty("type"))\u000a                return "-";\u000a\u000a            var type = timelapse["type"];\u000a            if (type == "zchange") {\u000a                return gettext("On Z Change");\u000a            } else if (type == "timed") {\u000a                return gettext("Timed") + " (" + timelapse["options"]["interval"] + " " + gettext("sec") + ")";\u000a            } else {\u000a                return "-";\u000a            }\u000a        });\u000a\u000a        self.fromCurrentData = function(data) {\u000a            self._fromData(data);\u000a        };\u000a\u000a        self.fromHistoryData = function(data) {\u000a            self._fromData(data);\u000a        };\u000a\u000a        self.fromTimelapseData = function(data) {\u000a            self.timelapse(data);\u000a        };\u000a\u000a        self._fromData = function(data) {\u000a            self._processStateData(data.state);\u000a            self._processJobData(data.job);\u000a            self._processProgressData(data.progress);\u000a            self._processZData(data.currentZ);\u000a            self._processBusyFiles(data.busyFiles);\u000a        };\u000a\u000a        self._processStateData = function(data) {\u000a            var prevPaused = self.isPaused();\u000a\u000a            self.stateString(gettext(data.text));\u000a            self.isErrorOrClosed(data.flags.closedOrError);\u000a            self.isOperational(data.flags.operational);\u000a            self.isPaused(data.flags.paused);\u000a            self.isPrinting(data.flags.printing);\u000a            self.isError(data.flags.error);\u000a            self.isReady(data.flags.ready);\u000a            self.isSdReady(data.flags.sdReady);\u000a\u000a            if (self.isPaused() != prevPaused) {\u000a                if (self.isPaused()) {\u000a                    self.titlePrintButton(self.TITLE_PRINT_BUTTON_PAUSED);\u000a                    self.titlePauseButton(self.TITLE_PAUSE_BUTTON_PAUSED);\u000a                } else {\u000a                    self.titlePrintButton(self.TITLE_PRINT_BUTTON_UNPAUSED);\u000a                    self.titlePauseButton(self.TITLE_PAUSE_BUTTON_UNPAUSED);\u000a                }\u000a            }\u000a        };\u000a\u000a        self._processJobData = function(data) {\u000a            if (data.file) {\u000a                self.filename(data.file.name);\u000a                self.filesize(data.file.size);\u000a                self.sd(data.file.origin == "sdcard");\u000a            } else {\u000a                self.filename(undefined);\u000a                self.filesize(undefined);\u000a                self.sd(undefined);\u000a            }\u000a\u000a            self.estimatedPrintTime(data.estimatedPrintTime);\u000a            self.lastPrintTime(data.lastPrintTime);\u000a\u000a            var result = [];\u000a            if (data.filament && typeof(data.filament) == "object" && _.keys(data.filament).length > 0) {\u000a                for (var key in data.filament) {\u000a                    if (!_.startsWith(key, "tool") || !data.filament[key] || !data.filament[key].hasOwnProperty("length") || data.filament[key].length <= 0) continue;\u000a\u000a                    result.push({\u000a                        name: ko.observable(gettext("Tool") + " " + key.substr("tool".length)),\u000a                        data: ko.observable(data.filament[key])\u000a                    });\u000a                }\u000a            }\u000a            self.filament(result);\u000a        };\u000a\u000a        self._processProgressData = function(data) {\u000a            if (data.completion) {\u000a                self.progress(data.completion);\u000a            } else {\u000a                self.progress(undefined);\u000a            }\u000a            self.filepos(data.filepos);\u000a            self.printTime(data.printTime);\u000a            self.printTimeLeft(data.printTimeLeft);\u000a        };\u000a\u000a        self._processZData = function(data) {\u000a            self.currentHeight(data);\u000a        };\u000a\u000a        self._processBusyFiles = function(data) {\u000a            var busyFiles = [];\u000a            _.each(data, function(entry) {\u000a                if (entry.hasOwnProperty("name") && entry.hasOwnProperty("origin")) {\u000a                    busyFiles.push(entry.origin + ":" + entry.name);\u000a                }\u000a            });\u000a            self.busyFiles(busyFiles);\u000a        };\u000a\u000a        self.print = function() {\u000a            var restartCommand = function() {\u000a                self._jobCommand("restart");\u000a            };\u000a\u000a            if (self.isPaused()) {\u000a                $("#confirmation_dialog .confirmation_dialog_message").text(gettext("This will restart the print job from the beginning."));\u000a                $("#confirmation_dialog .confirmation_dialog_acknowledge").unbind("click");\u000a                $("#confirmation_dialog .confirmation_dialog_acknowledge").click(function(e) {e.preventDefault(); $("#confirmation_dialog").modal("hide"); restartCommand(); });\u000a                $("#confirmation_dialog").modal("show");\u000a            } else {\u000a                self._jobCommand("start");\u000a            }\u000a\u000a        };\u000a\u000a        self.pause = function() {\u000a            self._jobCommand("pause");\u000a        };\u000a\u000a        self.cancel = function() {\u000a            self._jobCommand("cancel");\u000a        };\u000a\u000a        self._jobCommand = function(command, callback) {\u000a            $.ajax({\u000a                url: API_BASEURL + "job",\u000a                type: "POST",\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                data: JSON.stringify({command: command}),\u000a                success: function(response) {\u000a                    if (callback != undefined) {\u000a                        callback();\u000a                    }\u000a                }\u000a            });\u000a        }\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        PrinterStateViewModel,\u000a        ["loginStateViewModel"],\u000a        ["#state_wrapper", "#drop_overlay"]\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.