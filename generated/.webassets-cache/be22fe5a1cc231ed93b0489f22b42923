Vvar TouchUI = function() {\u000a	this.core.init.call(this);\u000a	this.knockout.viewModel.call(this);\u000a	this.knockout.bindings.call(this);\u000a	return this.core.bridge.call(this);\u000a};\u000a\u000aTouchUI.prototype = {\u000a	constructor: TouchUI,\u000a	isActive: ko.observable(false),\u000a\u000a	settings: {\u000a		id: "touch",\u000a		version: 0,\u000a\u000a		isFullscreen: ko.observable(false),\u000a		isTouchscreen: ko.observable(false),\u000a		isEpiphanyOrKweb: (window.navigator.userAgent.indexOf("AppleWebKit") !== -1 && window.navigator.userAgent.indexOf("ARM Mac OS X") !== -1),\u000a\u000a		hasFullscreen: ko.observable(document.webkitCancelFullScreen || document.msCancelFullScreen || document.oCancelFullScreen || document.mozCancelFullScreen || document.cancelFullScreen),\u000a		hasLocalStorage: ('localStorage' in window),\u000a		hasTouch: ('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0),\u000a\u000a		canLoadAutomatically: ($("#loadsomethingsomethingdarkside").length > 0),\u000a		touchuiModal: $('#touchui_settings_dialog'),\u000a\u000a		whatsNew: ko.observable(false)\u000a	},\u000a\u000a	core: {},\u000a	components: {},\u000a	knockout: {},\u000a	plugins: {},\u000a	animate: {\u000a		isHidebarActive: ko.observable(false)\u000a	},\u000a	DOM: {\u000a		create: {},\u000a		move: {},\u000a		overwrite: {}\u000a	},\u000a	scroll: {\u000a\u000a		defaults: {\u000a			iScroll: {\u000a				scrollbars: true,\u000a				mouseWheel: true,\u000a				interactiveScrollbars: true,\u000a				shrinkScrollbars: "scale",\u000a				fadeScrollbars: true,\u000a				disablePointer: true\u000a			}\u000a		},\u000a\u000a		iScrolls: {},\u000a		currentActive: null\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.animate.hide = function(what) {\u000a	var self = this;\u000a\u000a	//Lets hide the navbar by scroll\u000a	if( what === "navbar" ) {\u000a		if( this.animate.isHidebarActive() ) {\u000a			var navbar = $("#navbar"),\u000a				navbarHeight = parseFloat(navbar.height());\u000a\u000a			if( this.settings.hasTouch ) {\u000a				// Hide navigation bar on mobile\u000a				window.scrollTo(0,1);\u000a\u000a				if(parseFloat($("html,body").prop('scrollHeight')) > ($(window).height() + navbarHeight)) {//hasEnoughScroll?\u000a					$("html,body").stop().animate({\u000a						scrollTop: navbarHeight\u000a					}, 160, "swing");\u000a				}\u000a\u000a			} else {\u000a				var scroll = self.scroll.iScrolls.body;\u000a\u000a				if(scroll.isAnimating) {\u000a					setTimeout(function() {\u000a						self.animate.hide.call(self, what);\u000a					}, 10);\u000a					return;\u000a				}\u000a\u000a				setTimeout(function() {\u000a					if(Math.abs(scroll.maxScrollY) > 0) {\u000a						scroll.scrollTo(0, -navbarHeight, 160);\u000a					}\u000a				}, 0);\u000a\u000a			}\u000a		}\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.components.dropdown = {\u000a\u000a	init: function() {\u000a		this.components.dropdown.toggleSubmenu.call( this );\u000a		this.components.dropdown.toggle.call( this );\u000a	},\u000a\u000a	// Rewrite opening of dropdowns\u000a	toggle: function() {\u000a		var self = this;\u000a		var namespace = ".touchui.dropdown";\u000a\u000a		$(document)\u000a			.off('.dropdown')\u000a			.on('touchstart.dropdown.data-api', '.dropdown-menu', function (e) { e.stopPropagation() })\u000a			.on('click.dropdown.data-api', '[data-toggle=dropdown]', function(e) {\u000a				var $dropdownToggle = $(e.currentTarget);\u000a				var $dropdownContainer = $dropdownToggle.parent();\u000a\u000a				// Stop the hashtag from propagating\u000a				e.preventDefault();\u000a\u000a				// Toggle the targeted dropdown\u000a				$dropdownContainer.toggleClass("open");\u000a\u000a				// Refresh current scroll and add a min-height so we can reach the dropdown if needed\u000a				self.components.dropdown.containerMinHeight.call(self, $dropdownContainer, $dropdownToggle);\u000a\u000a				// Skip everything if we are in a dropdown toggling a dropdown (one click event is enuff!)\u000a				if( $dropdownContainer.parents('.open > .dropdown-menu').length > 0 ) {\u000a					return;\u000a				}\u000a\u000a				// Remove all other active dropdowns\u000a				$('.open [data-toggle="dropdown"]').not($dropdownToggle).parent().removeClass('open');\u000a\u000a				if ( !self.settings.hasTouch ) {\u000a					self.scroll.iScrolls.terminal.disable();\u000a				}\u000a\u000a				$(document).off("click"+namespace).on("click"+namespace, function(eve) {\u000a					// Check if we scrolled (touch devices wont trigger this click event after scrolling so assume we didn't move)\u000a					var moved = ( !self.settings.hasTouch ) ? self.scroll.currentActive.moved : false,\u000a						$target = $(eve.target);\u000a\u000a					if (\u000a						!moved && // If scrolling did not move\u000a						$target.parents(".ui-pnotify").length === 0 && // if not a click within notifiaction\u000a						(\u000a							!$target.parents().is($dropdownContainer) || // if clicks are not made within the dropdown container\u000a							$target.is('a:not([data-toggle="dropdown"])') // Unless it's a link but not a [data-toggle]\u000a						)\u000a					) {\u000a						$(document).off(eve);\u000a						$dropdownContainer.removeClass('open');\u000a\u000a						if ( !self.settings.hasTouch ) {\u000a							$('.octoprint-container').css("min-height", 0);\u000a							self.scroll.currentActive.refresh();\u000a							self.scroll.iScrolls.terminal.enable();\u000a						}\u000a					}\u000a				});\u000a			});\u000a\u000a	},\u000a\u000a	// Support 1.3.0 onMouseOver dropdowns\u000a	toggleSubmenu: function() {\u000a		$(".dropdown-submenu").addClass("dropdown");\u000a		$(".dropdown-submenu > a").attr("data-toggle", "dropdown");\u000a	},\u000a\u000a	// Refresh current scroll and add a min-height so we can reach the dropdown if needed\u000a	containerMinHeight: function($dropdownContainer, $dropdownToggle) {\u000a		var self = this;\u000a\u000a		// Touch devices can reach the dropdown by CSS, only if we're using iScroll\u000a		if ( !self.settings.hasTouch ) {\u000a			// Get active container\u000a			var $container = ($dropdownContainer.parents('.modal').length === 0 ) ? $('.octoprint-container') : $dropdownContainer.parents('.modal .modal-body');\u000a\u000a			// If we toggle within the dropdown then get the parent dropdown for total height\u000a			var $dropdownMenu = ( $dropdownContainer.parents('.open > .dropdown-menu').length > 0 ) ? $dropdownContainer.parents('.open > .dropdown-menu') : $dropdownToggle.next();\u000a\u000a			setTimeout(function() {\u000a\u000a				//If the main dropdown has closed (by toggle) then let's remove the min-height else\u000a				if(!$dropdownMenu.parent().hasClass("open")) {\u000a					$container.css("min-height", 0);\u000a					self.scroll.currentActive.refresh();\u000a				} else {\u000a					var y = Math.abs(self.scroll.currentActive.y),\u000a						height = $dropdownMenu.outerHeight(),\u000a						top = $dropdownMenu.offset().top;\u000a\u000a					$container.css("min-height", y + top + height);\u000a					self.scroll.currentActive.refresh();\u000a				}\u000a\u000a			}, 0);\u000a		}\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.components.fullscreen = {\u000a	init: function() {\u000a		var self = this;\u000a\u000a		// Bind fullscreenChange to knockout\u000a		$(document).bind("fullscreenchange", function() {\u000a			self.settings.isFullscreen($(document).fullScreen() !== false);\u000a			self.DOM.storage.set("fullscreen", self.settings.isFullscreen());\u000a		});\u000a\u000a	},\u000a	ask: function() {\u000a		var self = this;\u000a\u000a		if(self.settings.hasFullscreen()) {\u000a\u000a			new PNotify({\u000a				title: 'Fullscreen',\u000a				text: 'Would you like to go fullscreen?',\u000a				icon: 'glyphicon glyphicon-question-sign',\u000a				type: 'info',\u000a				hide: false,\u000a				addclass: 'askFullscreen',\u000a				confirm: {\u000a					confirm: true,\u000a					buttons: [{\u000a						text: 'Yes',\u000a						addClass: 'btn-primary',\u000a						click: function(notice) {\u000a							notice.remove();\u000a							$(document).fullScreen(true);\u000a						}\u000a					}, {\u000a						text: 'No',\u000a						click: function(notice) {\u000a							notice.remove();\u000a							$(document).trigger("fullscreenchange");\u000a						}\u000a					}]\u000a				},\u000a				buttons: {\u000a					closer: false,\u000a					sticker: false\u000a				},\u000a				history: {\u000a					history: false\u000a				}\u000a			});\u000a		}\u000a\u000a	}\u000a}\u000a\u000aTouchUI.prototype.components.keyboard = {\u000a\u000a	isActive: ko.observable(false),\u000a	config: {\u000a\u000a		default: {\u000a\u000a			display: {\u000a				'accept' :  "Save",\u000a				'bksp'   :  " ",\u000a				'default': 'ABC',\u000a				'meta1'  : '.?123',\u000a				'meta2'  : '#+='\u000a			},\u000a\u000a			layout: 'custom',\u000a			customLayout: {\u000a				'default': [\u000a					'a z e r t y u i o p',\u000a					'q s d f g h j k l m',\u000a					'{bksp} {s} w x c v b n',\u000a					'{accept} {c} {left} {right} {meta1} {space}'\u000a				],\u000a				'shift': [\u000a					'A Z E R T Y U I O P',\u000a					'Q S D F G H J K L M',\u000a					'{bksp} {s} W X C V B N',\u000a					'{accept} {c} {left} {right} {meta1} {space}'\u000a				],\u000a				'meta1': [\u000a					'1 2 3 4 5 6 7 8 9 0',\u000a					'- / : ; ( ) \u005cu20ac & @',\u000a					'{bksp} {meta2} . , ? ! \u005c' "',\u000a					'{accept} {c} {left} {right} {default} {space}'\u000a				],\u000a				'meta2': [\u000a					'[ ] { } # % ^ * + =',\u000a					'_ \u005c\u005c | ~ < > $ \u005cu00a3 \u005cu00a5',\u000a					'{bksp} {meta1} . , ? ! \u005c' "',\u000a					'{accept} {c} {left} {right} {default} {space}'\u000a				]\u000a			}\u000a\u000a		},\u000a		terminal: {\u000a			display: {\u000a				'bksp'   :  " ",\u000a				'accept' : 'Save',\u000a				'default': 'ABC',\u000a				'meta1'  : '.?123',\u000a				'meta2'  : '#+='\u000a			},\u000a\u000a			layout: 'custom',\u000a			customLayout: {\u000a				'default': [\u000a					'Q W E R T Y U I O P',\u000a					'A S D F G H J K L',\u000a					'{bksp} {s} Z X C V B N M',\u000a					'{accept} {c} {left} {right} {meta1} {space}'\u000a				],\u000a				'meta1': [\u000a					'1 2 3 4 5 6 7 8 9 0',\u000a					'- / : ; ( ) \u005cu20ac & @',\u000a					'{bksp} {meta2} . , ? ! \u005c' "',\u000a					'{accept} {c} {left} {right} {default} {space}'\u000a				],\u000a				'meta2': [\u000a					'[ ] { } # % ^ * + =',\u000a					'_ \u005c\u005c | ~ < > $ \u005cu00a3 \u005cu00a5',\u000a					'{bksp} {meta1} . , ? ! \u005c' "',\u000a					'{accept} {c} {left} {right} {default} {space}'\u000a				]\u000a			}\u000a\u000a		},\u000a		number: {\u000a			display: {\u000a				'bksp'   :  " ",\u000a				'a'      :  "Save",\u000a				'c'      :  "Cancel"\u000a			},\u000a\u000a			layout: 'custom',\u000a			customLayout: {\u000a				'default' : [\u000a					'{bksp} 1 2 3 4 5 6 7 ',\u000a					'{accept} {c} {left} {right} 8 9 0 - , . '\u000a				]\u000a			},\u000a		}\u000a\u000a\u000a	},\u000a\u000a	init: function() {\u000a		var self = this;\u000a\u000a		// Add virtual keyboard\u000a		var obj = {\u000a			visible: self.components.keyboard.onShow,\u000a			beforeClose: self.components.keyboard.onClose\u000a		};\u000a\u000a		var notThis = ['[type="file"]','[type="checkbox"]','[type="radio"]'];\u000a		$(document).on("mousedown", 'input:not('+notThis+'), textarea', function(e) {\u000a			var $elm = $(e.target);\u000a\u000a			if(!self.components.keyboard.isActive()) {\u000a\u000a				if($elm.data("keyboard")) {\u000a					$elm.data("keyboard").close().destroy();\u000a				}\u000a\u000a			} else {\u000a\u000a				if(!self.settings.hasTouch) {\u000a\u000a					// Force iScroll to stop following the mouse (bug)\u000a					self.scroll.currentActive._end(e);\u000a					setTimeout(function() {\u000a						self.scroll.currentActive.scrollToElement($elm[0], 200, 0, -30);\u000a					}, 0);\u000a\u000a				}\u000a\u000a				// $elm already has a keyboard\u000a				if($elm.data("keyboard")) {\u000a					$elm.data('keyboard').reveal();\u000a					return;\u000a				}\u000a\u000a				if($elm.attr("type") === "number") {\u000a					$elm.keyboard($.extend(self.components.keyboard.config.number, obj));\u000a				} else if($elm.attr("id") === "terminal-command") {\u000a					$elm.keyboard($.extend(self.components.keyboard.config.terminal, obj));\u000a				} else {\u000a					$elm.keyboard($.extend(self.components.keyboard.config.default, obj));\u000a				}\u000a			}\u000a\u000a		});\u000a	},\u000a\u000a	onShow: function(event, keyboard, el) {\u000a		keyboard.$keyboard.find("button").on("mousedown", function(e) {\u000a			$(e.target).addClass("touch-focus");\u000a\u000a			if(typeof $(e.target).data("timeout") !== "function") {\u000a				clearTimeout($(e.target).data("timeout"));\u000a			}\u000a			var timeout = setTimeout(function() {\u000a				$(e.target).removeClass("touch-focus").data("timeout", "");\u000a			}, 600);\u000a			$(e.target).data("timeout", timeout);\u000a		});\u000a	},\u000a\u000a	onClose: function(event, keyboard, el) {\u000a		keyboard.$keyboard.find("button").off("mousedown");\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.components.modal = {\u000a\u000a	init: function() {\u000a		if($("#settings_dialog_menu").length > 0) {\u000a			this.components.modal.dropdown.create.call(this, "#settings_dialog_menu", "special-dropdown-uni", "#settings_dialog_label");\u000a		}\u000a		if($("#usersettings_dialog ul.nav").length > 0) {\u000a			this.components.modal.dropdown.create.call(this, "#usersettings_dialog ul.nav", "special-dropdown-uni-2", "#usersettings_dialog h3");\u000a		}\u000a	},\u000a\u000a	dropdown: {\u000a		create: function(cloneId, newId, appendTo) {\u000a			var self = this;\u000a\u000a			// Remove unwanted whitespaces\u000a			$(appendTo).text($(appendTo).text().trim());\u000a\u000a			// Create a label that is clickable\u000a			var $settingsLabel = $("<span></span>")\u000a				.addClass("hidden")\u000a				.attr("id", newId)\u000a				.appendTo(appendTo)\u000a				.text($(cloneId+" .active").text().trim())\u000a				.on("click", function(e) {\u000a\u000a					// Stop if we clicked on the dropdown and stop the dropdown from regenerating more then once\u000a					if(e.target !== this || (e.target === this && $(".show-dropdown").length > 0)) {\u000a						return;\u000a					}\u000a\u000a					// Clone the main settings menu\u000a					var elm = $(cloneId)\u000a						.clone()\u000a						.attr("id", "")\u000a						.appendTo(this)\u000a						.addClass("show-dropdown");\u000a\u000a					// Add click binder to close down the dropdown\u000a					$(document).on("click", function(event) {\u000a\u000a						if(\u000a							$(event.target).closest('[data-toggle="tab"]').length > 0 || //Check if we clicked on a tab-link\u000a							$(event.target).closest("#"+newId).length === 0 //Check if we clicked outside the dropdown\u000a						) {\u000a							var href = $settingsLabel.find(".active").find('[data-toggle="tab"]').attr("href");\u000a							$(document).off(event).trigger("dropdown-closed.touchui"); // Trigger event for enabling scrolling\u000a\u000a							$('.show-dropdown').remove();\u000a							$('[href="'+href+'"]').click();\u000a							$settingsLabel.text($('[href="'+href+'"]').text());\u000a\u000a							if( !self.settings.hasTouch ) {\u000a								setTimeout(function() {\u000a									self.scroll.modal.stack[self.scroll.modal.stack.length-1].refresh();\u000a								}, 0);\u000a							}\u000a						}\u000a\u000a					});\u000a\u000a					// Trigger event for disabling scrolling\u000a					$(document).trigger("dropdown-open.touchui", elm[0]);\u000a				});\u000a\u000a			// reset the active text in dropdown on open\u000a			$(appendTo)\u000a				.closest(".modal")\u000a				.on("modal.touchui", function() {\u000a					var href = $(cloneId)\u000a						.find(".active")\u000a						.find('[data-toggle="tab"]')\u000a						.attr("href");\u000a\u000a					$settingsLabel.text($('[href="'+href+'"]').text());\u000a				});\u000a\u000a		}\u000a	}\u000a}\u000a\u000aTouchUI.prototype.components.slider = {\u000a\u000a	init: function() {\u000a\u000a		ko.bindingHandlers.slider = {\u000a			init: function (element, valueAccessor) {\u000a				var $element = $(element);\u000a\u000a				// Set value on input field\u000a				$element.val(valueAccessor().value());\u000a\u000a				// Create container\u000a				var div = $('<div class="slider-container"></div>').insertBefore(element);\u000a\u000a				// Wait untill next DOM bindings are executed\u000a				setTimeout(function() {\u000a					var $button = $(element).next('button');\u000a					var id = _.uniqueId("ui-inp");\u000a\u000a					$button.appendTo(div);\u000a					$element.appendTo(div);\u000a\u000a					$(div).find('input').attr("id", id);\u000a\u000a					var lbl = $('<label for="' + id + '" style="display: inline-block;">' + $button.text().split(":")[0].replace(" ", "") + ':</label>');\u000a					lbl.appendTo('.octoprint-container')\u000a					$element.attr("style", "padding-left:" + (lbl.width() + 15) + "px");\u000a					lbl.appendTo(div);\u000a\u000a				}, 60);\u000a\u000a				$element.on("change", function(e) {\u000a					valueAccessor().value($element.val());\u000a				}).attr({\u000a					max: valueAccessor().max,\u000a					min: valueAccessor().min,\u000a					step: valueAccessor().step,\u000a				});\u000a\u000a			},\u000a			update: function (element, valueAccessor) {\u000a				$(element).val(valueAccessor().value());\u000a			}\u000a		};\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.components.touchList = {\u000a	init: function() {\u000a\u000a		/* Add touch friendly files list */\u000a		var self = this;\u000a		var touch = false;\u000a		var start = 0;\u000a		var namespace = ".files.touchui";\u000a\u000a		$(document).on("mousedown touchstart", "#files .entry:not(.folder, .back), #temp .row-fluid", function(e) {\u000a			try {\u000a				touch = e.currentTarget;\u000a				start = e.pageX || e.originalEvent.targetTouches[0].pageX;\u000a			} catch(err) {\u000a				return;\u000a			}\u000a\u000a			$(document).one("mouseup"+namespace+" touchend"+namespace, function(e) {\u000a				touch = false;\u000a				start = 0;\u000a\u000a				$(document).off(namespace);\u000a			});\u000a\u000a			$(document).on("mousemove"+namespace+" touchmove"+namespace, function(event) {\u000a				if(touch !== false) {\u000a					try {\u000a						var current = event.pageX || event.originalEvent.targetTouches[0].pageX;\u000a\u000a						if(current > start + 80) {\u000a							$(document).trigger("fileclose" + namespace, event.target);\u000a							$(touch).removeClass("open");\u000a							start = current;\u000a						} else if(current < start - 80) {\u000a							$(document).trigger("fileopen" + namespace, event.target);\u000a							$(touch).addClass("open");\u000a							start = current;\u000a\u000a							if( $(touch).find(".btn-group").children().length > 4 ) {\u000a								$(touch).addClass("large");\u000a							}\u000a						}\u000a					} catch(err) {\u000a						//Ignore step\u000a					}\u000a				}\u000a			});\u000a\u000a		});\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.components.touchscreen = {\u000a\u000a	init: function () {\u000a		$("html").addClass("isTouchscreenUI");\u000a		this.settings.hasTouch = false;\u000a		this.settings.isTouchscreen(true);\u000a\u000a		if (this.settings.isEpiphanyOrKweb) {\u000a			this.settings.hasFullscreen(false);\u000a		}\u000a\u000a		$('.modal.fade').removeClass('fade');\u000a\u000a		// Improve performace\u000a		this.scroll.defaults.iScroll.scrollbars = false;\u000a		this.scroll.defaults.iScroll.interactiveScrollbars = false;\u000a		this.scroll.defaults.iScroll.useTransition = false;\u000a		// this.scroll.defaults.iScroll.useTransform = false;\u000a		// this.scroll.defaults.iScroll.HWCompositing = false;\u000a	},\u000a\u000a	isLoading: function (viewModels) {\u000a\u000a		if(this.settings.isTouchscreen()) {\u000a			// Disable fancy functionality\u000a			if(viewModels.terminalViewModel.enableFancyFunctionality) { //TODO: check if 1.2.9 to not throw errors in 1.2.8<\u000a				 viewModels.terminalViewModel.enableFancyFunctionality(false);\u000a			}\u000a\u000a			// Disable GCodeViewer in touchscreen mode\u000a			if (viewModels.gcodeViewModel) {\u000a				console.info("TouchUI: Disabling GCodeViewer in touchscreen mode...");\u000a				viewModels.gcodeViewModel.enabled = false;\u000a				viewModels.gcodeViewModel.initialize = _.noop;\u000a				viewModels.gcodeViewModel._processData = _.noop;\u000a				$("#gcode_link2").hide();\u000a			}\u000a		}\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.core.init = function() {\u000a\u000a	// Migrate old cookies into localstorage\u000a	this.DOM.storage.migration.call(this);\u000a\u000a	// Bootup TouchUI if Touch, Small resolution or storage say's so\u000a	if (this.core.boot.call(this)) {\u000a\u000a		$("html").attr("id", this.settings.id);\u000a\u000a		// Force mobile browser to set the window size to their format\u000a		$('<meta name="viewport" content="width=device-width, height=device-height, initial-scale=1, user-scalable=no, minimal-ui">').appendTo("head");\u000a		$('<meta name="apple-mobile-web-app-capable" content="yes">').appendTo("head");\u000a		$('<meta name="mobile-web-app-capable" content="yes">').appendTo("head");\u000a\u000a		this.isActive(true);\u000a\u000a		// Enforce active cookie\u000a		this.DOM.storage.set("active", true);\u000a\u000a		// Create keyboard cookie if not existing\u000a		if (this.DOM.storage.get("keyboardActive") === undefined) {\u000a			if (!this.settings.hasTouch) {\u000a				this.DOM.storage.set("keyboardActive", true);\u000a			} else {\u000a				this.DOM.storage.set("keyboardActive", false);\u000a			}\u000a		}\u000a\u000a		// Create hide navbar on click if not existing\u000a		if (this.DOM.storage.get("hideNavbarActive") === undefined) {\u000a			this.DOM.storage.set("hideNavbarActive", false);\u000a		}\u000a\u000a		// Treat KWEB3 as a special Touchscreen mode or enabled by cookie\u000a		if (this.settings.isEpiphanyOrKweb || this.DOM.storage.get("touchscreenActive")) {\u000a			this.components.touchscreen.init.call(this);\u000a		}\u000a\u000a		// Create fullscreen cookie if not existing and trigger pNotification\u000a		if (this.DOM.storage.get("fullscreen") === undefined) {\u000a			this.DOM.storage.set("fullscreen", false);\u000a			this.components.fullscreen.ask.call(this);\u000a		} else {\u000a			//Cookie say user wants fullscreen, ask it!\u000a			if(this.DOM.storage.get("fullscreen")) {\u000a				this.components.fullscreen.ask.call(this);\u000a			}\u000a		}\u000a\u000a		// Get state of cookies and store them in KO\u000a		this.components.keyboard.isActive(this.DOM.storage.get("keyboardActive"));\u000a		this.animate.isHidebarActive(this.DOM.storage.get("hideNavbarActive"));\u000a		this.settings.isFullscreen(this.DOM.storage.get("fullscreen"));\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.core.boot = function() {\u000a\u000a	// This should always start TouchUI\u000a	if(\u000a		document.location.hash === "#touch" ||\u000a		document.location.href.indexOf("?touch") > 0 ||\u000a		this.DOM.storage.get("active")\u000a	) {\u000a\u000a		return true;\u000a\u000a	} else if(\u000a		this.settings.canLoadAutomatically &&\u000a		this.DOM.storage.get("active") !== false\u000a	) {\u000a\u000a		if($(window).width() < 980) {\u000a			return true;\u000a		}\u000a\u000a		if(this.settings.hasTouch) {\u000a			return true;\u000a		}\u000a\u000a	}\u000a\u000a	return false;\u000a\u000a}\u000a\u000aTouchUI.prototype.core.bridge = function() {\u000a	var self = this;\u000a\u000a	this.core.bridge = {\u000a\u000a		allViewModels: {},\u000a		TOUCHUI_REQUIRED_VIEWMODELS: [\u000a			"terminalViewModel",\u000a			"connectionViewModel",\u000a			"settingsViewModel",\u000a			"softwareUpdateViewModel",\u000a			"controlViewModel",\u000a			"gcodeFilesViewModel",\u000a			"navigationViewModel",\u000a			"pluginManagerViewModel",\u000a			"temperatureViewModel",\u000a			"loginStateViewModel"\u000a		],\u000a		TOUCHUI_ELEMENTS: [\u000a			"#touchui_settings_dialog",\u000a			"#settings_plugin_touchui",\u000a			"#navbar_plugin_touchui"\u000a		],\u000a\u000a		domLoading: function() {\u000a			if (self.isActive()) {\u000a				self.scroll.beforeLoad.call(self);\u000a				self.DOM.init.call(self);\u000a			}\u000a		},\u000a\u000a		domReady: function() {\u000a			if (self.isActive()) {\u000a\u000a				if(_.some(self.core.bridge.OCTOPRINT_VIEWMODELS, function(v) { return v[2] === "#gcode"; })) {\u000a					self.core.bridge.TOUCHUI_REQUIRED_VIEWMODELS = self.core.bridge.TOUCHUI_REQUIRED_VIEWMODELS.concat(["gcodeViewModel"]);\u000a				}\u000a\u000a				self.components.dropdown.init.call(self);\u000a				self.components.fullscreen.init.call(self);\u000a				self.components.keyboard.init.call(self);\u000a				self.components.modal.init.call(self);\u000a				self.components.touchList.init.call(self);\u000a				self.components.slider.init.call(self);\u000a\u000a				self.scroll.init.call(self);\u000a			}\u000a		},\u000a\u000a		koStartup: function TouchUIViewModel(viewModels) {\u000a			self.core.bridge.allViewModels = _.object(self.core.bridge.TOUCHUI_REQUIRED_VIEWMODELS, viewModels);\u000a			self.knockout.isLoading.call(self, self.core.bridge.allViewModels);\u000a			return self;\u000a		}\u000a	}\u000a\u000a	return this.core.bridge;\u000a}\u000a\u000aTouchUI.prototype.core.less = {\u000a\u000a	options: {\u000a		template: {\u000a			importUrl:	"/plugin/touchui/static/less/touchui.bundled.less",\u000a			import:		'@import "{importUrl}"; \u005cn',\u000a			variables:	"@main-color: {mainColor}; \u005cn" +\u000a						"@terminal-color: {termColor}; \u005cn" +\u000a						"@text-color: {textColor}; \u005cn" +\u000a						"@main-background: {bgColor}; \u005cn\u005cn"\u000a		},\u000a		API: "/plugin/touchui/css"\u000a	},\u000a\u000a	save: function() {\u000a		var variables = "";\u000a		var options = this.core.less.options;\u000a		var self = this;\u000a\u000a		if(self.settings.useCustomization()) {\u000a			if(self.settings.colors.useLocalFile()) {\u000a\u000a				$.get(options.API, {\u000a						path: self.settings.colors.customPath()\u000a					})\u000a					.done(function(response) {\u000a						self.core.less.render.call(self, options.template.import.replace("{importUrl}", options.template.importUrl) + response);\u000a					})\u000a					.error(function(error) {\u000a						self.core.less.error.call(self, error);\u000a					});\u000a\u000a			} else {\u000a\u000a				self.core.less.render.call(self, "" +\u000a					options.template.import.replace("{importUrl}", options.template.importUrl) +\u000a					options.template.variables.replace("{mainColor}", self.settings.colors.mainColor())\u000a						.replace("{termColor}", self.settings.colors.termColor())\u000a						.replace("{textColor}", self.settings.colors.textColor())\u000a						.replace("{bgColor}", self.settings.colors.bgColor())\u000a				);\u000a\u000a			}\u000a		}\u000a	},\u000a\u000a	render: function(data) {\u000a		var self = this;\u000a		var callback = function(error, result) {\u000a\u000a				if (error) {\u000a					self.core.less.error.call(self, error);\u000a				} else {\u000a\u000a					$.post(self.core.less.options.API, {\u000a							css: result.css\u000a						})\u000a						.done(function() {\u000a							if (self.settings.requireNewCSS()) {\u000a								self.settings.refreshCSS("fast");\u000a							}\u000a						})\u000a						.error(function(error) {\u000a							self.core.less.error.call(self, error);\u000a						});\u000a\u000a				}\u000a			}\u000a\u000a		if(window.less.render) {\u000a			window.less.render(data, {\u000a				compress: true\u000a			}, callback);\u000a		} else {\u000a			window.less.Parser({}).parse(data, function(error, result) {\u000a				if(result) {\u000a					result = {\u000a						css: result.toCSS({\u000a							compress: true\u000a						})\u000a					}\u000a				}\u000a				callback.call(this, error, result);\u000a			});\u000a		}\u000a	},\u000a\u000a	error: function(error) {\u000a		var content = error.responseText;\u000a		if(content && content.trim() && error.status !== 401) {\u000a			new PNotify({\u000a				title: 'TouchUI: Whoops, something went wrong...',\u000a				text: content,\u000a				icon: 'glyphicon glyphicon-question-sign',\u000a				type: 'error',\u000a				hide: false\u000a			});\u000a		}\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.core.version = {\u000a\u000a	init: function(softwareUpdateViewModel) {\u000a		var self = this;\u000a\u000a		$("<span></span>").appendTo("#terminal-output");\u000a\u000a		if(softwareUpdateViewModel) {\u000a\u000a			softwareUpdateViewModel.versions.items.subscribe(function(changes) {\u000a\u000a				touchui = softwareUpdateViewModel.versions.getItem(function(elm) {\u000a					return (elm.key === "touchui");\u000a				}, true) || false;\u000a\u000a				if( touchui !== false && touchui.information !== null ) {\u000a					var remote = Number(touchui.information.remote.value.split('.').join('')),\u000a						local = Number(touchui.information.local.value.split('.').join(''));\u000a\u000a					if(remote > local) {\u000a						$("#touch_updates_css").remove();\u000a						$('head').append('<style id="touch_updates_css">#term pre span:first-child:before{ content: "v'+touchui.information.local.value+" outdated, new version: v"+touchui.information.remote.value+'" !important; }</style>');\u000a					} else {\u000a						if( $("#touch_updates_css").length === 0 ) {\u000a							$('head').append('<style id="touch_updates_css">#term pre span:first-child:before{ content: "v'+touchui.information.local.value+'" !important; }</style>');\u000a						}\u000a					}\u000a				}\u000a\u000a			});\u000a\u000a		}\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.init = function() {\u000a\u000a	// Create new tab with printer status and make it active\u000a	this.DOM.create.printer.init(this.DOM.create.tabbar);\u000a	this.DOM.create.printer.menu.$elm.find('a').trigger("click");\u000a\u000a	// Create a new persistent dropdown\u000a	this.DOM.create.dropdown.init.call( this.DOM.create.dropdown );\u000a\u000a	// Move all other items from tabbar into dropdown\u000a	this.DOM.move.tabbar.init.call(this);\u000a	this.DOM.move.navbar.init.call(this);\u000a	this.DOM.move.afterTabAndNav.call(this );\u000a	this.DOM.move.overlays.init.call(this);\u000a	this.DOM.move.terminal.init.call(this);\u000a\u000a	// Move connection sidebar into a new modal\u000a	this.DOM.move.connection.init(this.DOM.create.tabbar);\u000a\u000a	// Manipulate controls div\u000a	this.DOM.move.controls.init();\u000a\u000a	// Disable these bootstrap/jquery plugins\u000a	this.DOM.overwrite.tabdrop.call(self);\u000a	this.DOM.overwrite.modal.call(self);\u000a\u000a	// Add a webcam tab if it's defined\u000a	if ($("#webcam_container").length > 0) {\u000a		this.DOM.create.webcam.init(this.DOM.create.tabbar);\u000a	}\u000a\u000a	// Add class with how many tab-items\u000a	$("#tabs, #navbar").addClass("items-" + $("#tabs li:not(.hidden_touch)").length);\u000a\u000a	// Remove active class when clicking on a tab in the tabbar\u000a	$('#tabs [data-toggle=tab]').on("click", function() {\u000a		$("#all_touchui_settings").removeClass("item_active");\u000a	});\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.cookies = {\u000a\u000a	get: function(key) {\u000a		var name = "TouchUI." + key + "=";\u000a		var ca = document.cookie.split(';');\u000a		for(var i=0; i<ca.length; i++) {\u000a			var c = ca[i];\u000a			while (c.charAt(0)==' ') c = c.substring(1);\u000a			if (c.indexOf(name) == 0) return $.parseJSON(c.substring(name.length,c.length));\u000a		}\u000a		return undefined;\u000a	},\u000a\u000a	set: function(key, value) {\u000a		var d = new Date();\u000a		d.setTime(d.getTime()+(360*24*60*60*1000));\u000a		var expires = "expires="+d.toUTCString();\u000a		document.cookie = "TouchUI." + key + "=" + value + "; " + expires;\u000a	},\u000a\u000a	toggleBoolean: function(key) {\u000a		var value = $.parseJSON(this.get(key) || "false");\u000a\u000a		if(value === true) {\u000a			this.set(key, "false");\u000a		} else {\u000a			this.set(key, "true");\u000a		}\u000a\u000a		return !value;\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.localstorage = {\u000a	store: JSON.parse(localStorage["TouchUI"] || "{}"),\u000a\u000a	get: function (key) {\u000a		return this.store[key];\u000a	},\u000a\u000a	set: function (key, value) {\u000a		this.store[key] = value;\u000a		localStorage["TouchUI"] = JSON.stringify(this.store);\u000a		return this.store[key];\u000a	},\u000a\u000a	toggleBoolean: function (key) {\u000a		var value = this.store[key] || false;\u000a\u000a		if(value === true) {\u000a			this.set(key, false);\u000a		} else {\u000a			this.set(key, true);\u000a		}\u000a\u000a		return !value;\u000a\u000a	}\u000a\u000a}\u000a\u000a// Since I messed up by releasing start_kweb3.xinit without disabling private\u000a// mode, we now need to check if we can store anything at all in localstorage\u000a// the missing -P will prevent any localstorage\u000aif (TouchUI.prototype.settings.hasLocalStorage) {\u000a	try {\u000a		localStorage["TouchUIcanWeHazStorage"] = "true";\u000a		TouchUI.prototype.DOM.storage = TouchUI.prototype.DOM.localstorage;\u000a		delete localStorage["TouchUIcanWeHazStorage"];\u000a	} catch(err) {\u000a\u000a		// TODO: remove this is future\u000a		if(TouchUI.prototype.settings.isEpiphanyOrKweb) {\u000a			$(function() {\u000a				new PNotify({\u000a					type: 'error',\u000a					title: "Private Mode detection:",\u000a					text: "Edit the startup file 'start_kweb3.xinit' in '~/OctoPrint-TouchUI-autostart/' "+\u000a						"and add the parameter 'P' after the dash. \u005cn\u005cn" +\u000a						"For more information see the v0.3.3 release notes.",\u000a					hide: false\u000a				});\u000a			});\u000a		}\u000a\u000a		console.info("Localstorage defined but failback to cookies due to errors.");\u000a		TouchUI.prototype.DOM.storage = TouchUI.prototype.DOM.cookies;\u000a	}\u000a} else {\u000a	TouchUI.prototype.DOM.storage = TouchUI.prototype.DOM.cookies;\u000a}\u000a\u000aTouchUI.prototype.DOM.storage.migration = (TouchUI.prototype.DOM.storage === TouchUI.prototype.DOM.localstorage) ? function migration() {\u000a\u000a	if (this.settings.hasLocalStorage) {\u000a		if (document.cookie.indexOf("TouchUI.") !== -1) {\u000a			console.info("TouchUI cookies migration.");\u000a\u000a			var name = "TouchUI.";\u000a			var ca = document.cookie.split(';');\u000a			for (var i=0; i<ca.length; i++) {\u000a				var c = ca[i];\u000a				while (c.charAt(0)==' ') c = c.substring(1);\u000a				if (c.indexOf(name) == 0) {\u000a					var string = c.substring(name.length,c.length);\u000a					string = string.split("=");\u000a					var value = $.parseJSON(string[1]);\u000a\u000a					console.info("Saving cookie", string[0], "with value", value, "to localstorage.");\u000a					this.DOM.storage.set(string[0], value);\u000a\u000a					console.info("Removing cookie", string[0]);\u000a					document.cookie = "TouchUI." + string[0] + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";\u000a				}\u000a			}\u000a		}\u000a	}\u000a\u000a} : _.noop;\u000a\u000aTouchUI.prototype.knockout.bindings = function() {\u000a	var self = this;\u000a\u000a	this.bindings = {\u000a\u000a		toggleTouch: function() {\u000a			if (self.DOM.storage.toggleBoolean("active")) {\u000a				document.location.hash = "#touch";\u000a			} else {\u000a				document.location.hash = "";\u000a			}\u000a			document.location.reload();\u000a		},\u000a\u000a		toggleKeyboard: function() {\u000a			if (self.isActive()) {\u000a				self.components.keyboard.isActive(self.DOM.storage.toggleBoolean("keyboardActive"));\u000a			}\u000a		},\u000a\u000a		toggleHidebar: function() {\u000a			if (self.isActive()) {\u000a				self.animate.isHidebarActive(self.DOM.storage.toggleBoolean("hideNavbarActive"));\u000a			}\u000a		},\u000a\u000a		toggleFullscreen: function() {\u000a			$(document).toggleFullScreen();\u000a		},\u000a\u000a		toggleTouchscreen: function() {\u000a			if (self.isActive()) {\u000a				self.settings.isTouchscreen(self.DOM.storage.toggleBoolean("touchscreenActive"));\u000a				document.location.reload();\u000a			}\u000a		},\u000a\u000a		show: function() {\u000a			self.settings.touchuiModal.modal("show");\u000a		}\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.knockout.isLoading = function (viewModels) {\u000a	var self = this;\u000a\u000a	if(self.isActive()) {\u000a		self.components.touchscreen.isLoading.call(self, viewModels);\u000a\u000a		// Prevent user from double clicking in a short period on buttons\u000a		$(document).on("click", "button:not(.box, .distance, .dropdown-toggle)", function(e) {\u000a			var printer = $(e.target);\u000a			printer.prop('disabled', true);\u000a\u000a			setTimeout(function() {\u000a				printer.prop('disabled', false);\u000a			}, 600);\u000a		});\u000a\u000a		// Update scroll area if new items arrived\u000a		if( !self.settings.hasTouch ) {\u000a			viewModels.gcodeFilesViewModel.listHelper.paginatedItems.subscribe(function(a) {\u000a				setTimeout(function() {\u000a					self.scroll.iScrolls.body.refresh();\u000a				}, 300);\u000a			});\u000a		}\u000a\u000a		// Watch the operational binder for visual online/offline\u000a		viewModels.connectionViewModel.isOperational.subscribe(function(newOperationalState) {\u000a			var printLink = $("#all_touchui_settings");\u000a			if( !newOperationalState ) {\u000a				printLink.addClass("offline").removeClass("online");\u000a				$("#conn_link2").addClass("offline").removeClass("online");\u000a			} else {\u000a				printLink.removeClass("offline").addClass("online");\u000a				$("#conn_link2").removeClass("offline").addClass("online");\u000a			}\u000a		});\u000a	}\u000a\u000a	// Check if we can show whats new in this version\u000a	self.settings.whatsNew.subscribe(function(whatsNew) {\u000a		if(whatsNew !== false && whatsNew.trim() != "") {\u000a			new PNotify({\u000a				title: 'TouchUI: What\u005c's new?',\u000a				text: whatsNew,\u000a				icon: 'glyphicon glyphicon-question-sign',\u000a				type: 'info',\u000a				hide: false\u000a			});\u000a		}\u000a	});\u000a\u000a}\u000a\u000aTouchUI.prototype.knockout.isReady = function (viewModels) {\u000a	var self = this;\u000a\u000a	if(self.isActive()) {\u000a		// Repaint graph after resize (.e.g orientation changed)\u000a		$(window).on("resize", function() {\u000a			viewModels.temperatureViewModel.updatePlot();\u000a		});\u000a\u000a		// Remove slimScroll from files list\u000a		$('.gcode_files').slimScroll({destroy: true});\u000a		$('.slimScrollDiv').slimScroll({destroy: true});\u000a\u000a		// Remove active keyboard when disabled\u000a		self.components.keyboard.isActive.subscribe(function(isActive) {\u000a			if( !isActive ) {\u000a				$(".ui-keyboard-input").each(function(ind, elm) {\u000a					$(elm).data("keyboard").destroy();\u000a				});\u000a			}\u000a		});\u000a\u000a		// Remove drag files into website feature\u000a		$(document).off("dragover");\u000a		if(viewModels.gcodeFilesViewModel._enableDragNDrop) {\u000a			viewModels.gcodeFilesViewModel._enableDragNDrop = function() {};\u000a		}\u000a\u000a		// Hide the dropdown after login\u000a		viewModels.settingsViewModel.loginState.loggedIn.subscribe(function(isLoggedIn) {\u000a			if(isLoggedIn && $(".open > .dropdown-menu").length > 0) {\u000a				$(document).trigger("click");\u000a			}\u000a		});\u000a\u000a		// Redo scroll-to-end interface\u000a		$("#term .terminal small.pull-right").html('<a href="#"><i class="fa fa-angle-double-down"></i></a>').on("click", function() {\u000a			viewModels.terminalViewModel.scrollToEnd();\u000a			return false;\u000a		});\u000a\u000a		// Resize height of low-fi terminal to enable scrolling\u000a		if($("#terminal-output-lowfi").prop("scrollHeight")) {\u000a			viewModels.terminalViewModel.plainLogOutput.subscribe(function() {\u000a				$("#terminal-output-lowfi").height($("#terminal-output-lowfi").prop("scrollHeight"));\u000a			});\u000a		}\u000a\u000a		// Overwrite terminal knockout functions (i.e. scroll to end)\u000a		this.scroll.overwrite.call(this, viewModels.terminalViewModel);\u000a\u000a		// Setup version tracking in terminal\u000a		this.core.version.init.call(this, viewModels.softwareUpdateViewModel);\u000a\u000a		// (Re-)Apply bindings to the new webcam div\u000a		if($("#webcam").length) {\u000a			ko.applyBindings(viewModels.controlViewModel, $("#webcam")[0]);\u000a		}\u000a\u000a		// (Re-)Apply bindings to the new navigation div\u000a		if($("#navbar_login").length) {\u000a			try {\u000a				ko.applyBindings(viewModels.navigationViewModel, $("#navbar_login")[0]);\u000a			} catch(err) {}\u000a\u000a			// Force the dropdown to appear open when logedIn\u000a			viewModels.navigationViewModel.loginState.loggedIn.subscribe(function(loggedIn) {\u000a				if( loggedIn ) {\u000a					$('#navbar_login a.dropdown-toggle').addClass("hidden_touch");\u000a					$('#login_dropdown_loggedin').removeClass('hide dropdown open').addClass('visible_touch');\u000a				} else {\u000a					$('#navbar_login a.dropdown-toggle').removeClass("hidden_touch");\u000a					$('#login_dropdown_loggedin').removeClass('visible_touch');\u000a				}\u000a\u000a				// Refresh scroll view when login state changed\u000a				if( !self.settings.hasTouch ) {\u000a					setTimeout(function() {\u000a						self.scroll.currentActive.refresh();\u000a					}, 0);\u000a				}\u000a			});\u000a		}\u000a\u000a		// (Re-)Apply bindings to the new system commands div\u000a		if($("#navbar_systemmenu").length) {\u000a			ko.applyBindings(viewModels.navigationViewModel, $("#navbar_systemmenu")[0]);\u000a			ko.applyBindings(viewModels.navigationViewModel, $("#divider_systemmenu")[0]);\u000a		}\u000a\u000a		// Force knockout to read the change\u000a		$('.colorPicker').tinycolorpicker().on("change", function(e, hex, rgb, isTriggered) {\u000a			if(isTriggered !== false) {\u000a				$(this).find("input").trigger("change", [hex, rgb, false]);\u000a			}\u000a		});\u000a\u000a		// Reuse for code below\u000a		var refreshUrl = function(href) {\u000a			return href.split("?")[0] + "?ts=" + new Date().getMilliseconds();\u000a		}\u000a\u000a		// Reload CSS if needed\u000a		self.settings.refreshCSS.subscribe(function(hasRefresh) {\u000a			if (hasRefresh || hasRefresh === "fast") {\u000a				// Wait 2 seconds, so we're not too early\u000a				setTimeout(function() {\u000a					var $css = $("#touchui-css");\u000a					$css.attr("href", refreshUrl($css.attr("href")));\u000a					self.settings.refreshCSS(false);\u000a				}, (hasRefresh === "fast") ? 0 : 1200);\u000a			}\u000a		});\u000a\u000a		// Reload CSS or LESS after saving our settings\u000a		self.settings.hasCustom.subscribe(function(customCSS) {\u000a			if(customCSS !== "") {\u000a				var $css = $("#touchui-css");\u000a				var href = $css.attr("href");\u000a\u000a				if(customCSS) {\u000a					href = href.replace("touchui.css", "touchui.custom.css");\u000a				} else {\u000a					href = href.replace("touchui.custom.css", "touchui.css");\u000a				}\u000a\u000a				$css.attr("href", refreshUrl(href));\u000a			}\u000a		});\u000a	}\u000a\u000a	// Check if we need to update an old LESS file with a new LESS one\u000a	var requireNewCSS = ko.computed(function() {\u000a		return self.settings.requireNewCSS() && viewModels.loginStateViewModel.isAdmin();\u000a	});\u000a	requireNewCSS.subscribe(function(requireNewCSS) {\u000a		if(requireNewCSS) {\u000a			setTimeout(function() {\u000a				self.core.less.save.call(self, self);\u000a			}, 100);\u000a		}\u000a	});\u000a\u000a}\u000a\u000aTouchUI.prototype.knockout.viewModel = function() {\u000a	var self = this;\u000a\u000a	// Subscribe to OctoPrint events\u000a	self.onStartupComplete = function () {\u000a		if (self.isActive()) {\u000a			self.DOM.overwrite.tabbar.call(self);\u000a		}\u000a		self.knockout.isReady.call(self, self.core.bridge.allViewModels);\u000a		if (self.isActive()) {\u000a			self.plugins.init.call(self, self.core.bridge.allViewModels);\u000a		}\u000a	}\u000a\u000a	self.onBeforeBinding = function() {\u000a		ko.mapping.fromJS(self.core.bridge.allViewModels.settingsViewModel.settings.plugins.touchui, {}, self.settings);\u000a	}\u000a\u000a	self.onSettingsBeforeSave = function() {\u000a		self.core.less.save.call(self);\u000a	}\u000a\u000a	self.onTabChange = function() {\u000a		if (self.isActive()) {\u000a			self.animate.hide.call(self, "navbar");\u000a\u000a			if(!self.settings.hasTouch && self.scroll.currentActive) {\u000a				self.scroll.currentActive.refresh();\u000a				setTimeout(function() {\u000a					self.scroll.currentActive.refresh();\u000a				}, 0);\u000a			}\u000a		}\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.plugins.init = function (viewModels) {\u000a	this.plugins.screenSquish(viewModels.pluginManagerViewModel);\u000a}\u000a\u000aTouchUI.prototype.plugins.navbarTemp = function() {\u000a\u000a	// Manually move navbar temp (hard move)\u000a	if( $("#navbar_plugin_navbartemp").length > 0 ) {\u000a		var navBarTmp = $("#navbar_plugin_navbartemp").appendTo(this.DOM.create.dropdown.container);\u000a		$('<li class="divider"></li>').insertBefore(navBarTmp);\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.plugins.screenSquish = function(pluginManagerViewModel) {\u000a	var shown = false;\u000a\u000a	pluginManagerViewModel.plugins.items.subscribe(function() {\u000a\u000a		var ScreenSquish = pluginManagerViewModel.plugins.getItem(function(elm) {\u000a			return (elm.key === "ScreenSquish");\u000a		}, true) || false;\u000a\u000a		if(!shown && ScreenSquish && ScreenSquish.enabled) {\u000a			shown = true;\u000a			new PNotify({\u000a				title: 'TouchUI: ScreenSquish is running',\u000a				text: 'Running ScreenSquish and TouchUI will give issues since both plugins try the same, we recommend turning off ScreenSquish.',\u000a				icon: 'glyphicon glyphicon-question-sign',\u000a				type: 'error',\u000a				hide: false,\u000a				confirm: {\u000a					confirm: true,\u000a					buttons: [{\u000a						text: 'Disable ScreenSquish',\u000a						addClass: 'btn-primary',\u000a						click: function(notice) {\u000a							if(!ScreenSquish.pending_disable) {\u000a								pluginManagerViewModel.togglePlugin(ScreenSquish);\u000a							}\u000a							notice.remove();\u000a						}\u000a					}]\u000a				},\u000a			});\u000a		}\u000a\u000a	});\u000a\u000a};\u000a\u000aTouchUI.prototype.scroll.beforeLoad = function() {\u000a\u000a	// Manipulate DOM for iScroll before knockout binding kicks in\u000a	if (!this.settings.hasTouch) {\u000a		$('<div id="scroll"></div>').insertBefore('.page-container');\u000a		$('.page-container').appendTo("#scroll");\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.scroll.init = function() {\u000a	var self = this;\u000a\u000a	if ( this.settings.hasTouch ) {\u000a		var width = $(window).width();\u000a\u000a		// Covert VH to the initial height (prevent height from jumping when navigation bar hides/shows)\u000a		$("#temperature-graph").parent().height($("#temperature-graph").parent().outerHeight());\u000a		$("#terminal-scroll").height($("#terminal-scroll").outerHeight());\u000a		$("#terminal-sendpanel").css("top", $("#terminal-scroll").outerHeight()-1);\u000a\u000a		$(window).on("resize", function() {\u000a\u000a			if(width !== $(window).width()) {\u000a				$("#temperature-graph").parent().height($("#temperature-graph").parent().outerHeight());\u000a				$("#terminal-scroll").css("height", "").height($("#terminal-scroll").outerHeight());\u000a				$("#terminal-sendpanel").css("top", $("#terminal-scroll").outerHeight()-1);\u000a				width = $(window).width();\u000a			}\u000a\u000a\u000a		});\u000a\u000a	} else {\u000a\u000a		// Set overflow hidden for best performance\u000a		$("html").addClass("emulateTouch");\u000a\u000a		self.scroll.terminal.init.call(self);\u000a		self.scroll.body.init.call(self);\u000a		self.scroll.modal.init.call(self);\u000a		self.scroll.overlay.init.call(self);\u000a\u000a		$(document).on("slideCompleted", function() {\u000a			self.scroll.currentActive.refresh();\u000a		});\u000a\u000a		// Refresh body on dropdown click\u000a		$(document).on("click", ".pagination ul li a", function() {\u000a			setTimeout(function() {\u000a				self.scroll.currentActive.refresh();\u000a			}, 0);\u000a		});\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.scroll.blockEvents = {\u000a	className: "no-pointer",\u000a\u000a	scrollStart: function($elm, iScrollInstance) {\u000a		$elm.addClass(this.className);\u000a	},\u000a\u000a	scrollEnd: function($elm, iScrollInstance) {\u000a		$elm.removeClass(this.className);\u000a		iScrollInstance.refresh();\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.scroll.body = {\u000a\u000a	init: function() {\u000a		var self = this;\u000a		var scrollStart = false;\u000a		var $noPointer = $('.page-container');\u000a\u000a		// Create main body scroll\u000a		self.scroll.iScrolls.body = new IScroll("#scroll", self.scroll.defaults.iScroll);\u000a		self.scroll.currentActive = self.scroll.iScrolls.body;\u000a\u000a		// Block everthing while scrolling\u000a		var scrollStart = self.scroll.blockEvents.scrollStart.bind(self.scroll.blockEvents, $noPointer, self.scroll.iScrolls.body),\u000a			scrollEnd = self.scroll.blockEvents.scrollEnd.bind(self.scroll.blockEvents, $noPointer, self.scroll.iScrolls.body);\u000a\u000a		// Disable all JS events while scrolling for best performance\u000a		self.scroll.iScrolls.body.on("scrollStart", scrollStart);\u000a		self.scroll.iScrolls.body.on("onBeforeScrollStart", scrollStart);\u000a		self.scroll.iScrolls.body.on("scrollEnd", scrollEnd);\u000a		self.scroll.iScrolls.body.on("scrollCancel", scrollEnd);\u000a\u000a		// Prevent any misfortune\u000a		$(document).on("mouseup.prevent.pointer touchend.prevent.pointer", function() {\u000a			$noPointer.removeClass('no-pointer');\u000a		});\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.scroll.modal = {\u000a	stack: [],\u000a	dropdown: null,\u000a\u000a	init: function() {\u000a		var $document = $(document),\u000a			self = this;\u000a\u000a		$document.on("modal.touchui", function(e, elm) {\u000a			var $modalElm = $(elm),\u000a				$modalContainer = $(elm).parent();\u000a\u000a			// Create temp iScroll within the modal\u000a			var curModal = new IScroll($modalContainer[0], self.scroll.defaults.iScroll);\u000a\u000a			// Store into stack\u000a			self.scroll.modal.stack.push(curModal);\u000a			self.scroll.currentActive = curModal;\u000a\u000a			// Force iScroll to get the correct scrollHeight\u000a			setTimeout(function() {\u000a				if(curModal) {\u000a					curModal.refresh();\u000a				}\u000a			}, 0);\u000a			// And Refresh again after animation\u000a			setTimeout(function() {\u000a				if(curModal) {\u000a					curModal.refresh();\u000a				}\u000a			}, 800);\u000a\u000a			// Store bindings into variable for future reference\u000a			var scrollStart = self.scroll.blockEvents.scrollStart.bind(self.scroll.blockEvents, $modalElm, curModal),\u000a				scrollEnd = self.scroll.blockEvents.scrollEnd.bind(self.scroll.blockEvents, $modalElm, curModal);\u000a\u000a			// Disable all JS events while scrolling for best performance\u000a			curModal.on("scrollStart", scrollStart);\u000a			curModal.on("scrollEnd", scrollEnd);\u000a			curModal.on("scrollCancel", scrollEnd);\u000a\u000a			// Refresh the scrollHeight and scroll back to top with these actions:\u000a			$document.on("click.scrollHeightTouchUI", '[data-toggle="tab"], .pagination ul li a', function(e) {\u000a				curModal._end(e);\u000a\u000a				setTimeout(function() {\u000a					curModal.refresh();\u000a					curModal.scrollTo(0, 0);\u000a				}, 0);\u000a			});\u000a\u000a			// Kill it with fire!\u000a			$modalElm.one("destroy", function() {\u000a				$document.off("click.scrollHeightTouchUI");\u000a				self.scroll.modal.stack.pop();\u000a\u000a				if(self.scroll.modal.stack.length > 0) {\u000a					self.scroll.currentActive = self.scroll.modal.stack[self.scroll.modal.stack.length-1];\u000a				} else {\u000a					self.scroll.currentActive = self.scroll.iScrolls.body;\u000a				}\u000a\u000a				curModal.destroy();\u000a				curModal.off("scrollStart", scrollStart);\u000a				curModal.off("scrollEnd", scrollEnd);\u000a				curModal.off("scrollCancel", scrollEnd);\u000a				curModal = undefined;\u000a			});\u000a\u000a		});\u000a\u000a		// Triggered when we create the dropdown and need scrolling\u000a		$document.on("dropdown-open.touchui", function(e, elm) {\u000a			var $elm = $(elm);\u000a\u000a			// Create dropdown scroll\u000a			self.scroll.modal.dropdown = new IScroll(elm, {\u000a				scrollbars: true,\u000a				mouseWheel: true,\u000a				interactiveScrollbars: true,\u000a				shrinkScrollbars: "scale"\u000a			});\u000a\u000a			// Set scroll to active item\u000a			self.scroll.modal.dropdown.scrollToElement($elm.find('li.active')[0], 0, 0, -30);\u000a\u000a			// Disable scrolling in active modal\u000a			self.scroll.modal.stack[self.scroll.modal.stack.length-1].disable();\u000a\u000a			// Store bindings into variable for future reference\u000a			var scrollStart = self.scroll.blockEvents.scrollStart.bind(self.scroll.blockEvents, $elm, self.scroll.modal.dropdown),\u000a				scrollEnd = self.scroll.blockEvents.scrollEnd.bind(self.scroll.blockEvents, $elm, self.scroll.modal.dropdown);\u000a\u000a			// Disable all JS events for smooth scrolling\u000a			self.scroll.modal.dropdown.on("scrollStart", scrollStart);\u000a			self.scroll.modal.dropdown.on("scrollEnd", scrollEnd);\u000a			self.scroll.modal.dropdown.on("scrollCancel", scrollEnd);\u000a\u000a			$document.on("dropdown-closed.touchui", function() {\u000a				// Enable active modal\u000a				self.scroll.modal.stack[self.scroll.modal.stack.length-1].enable();\u000a\u000a				self.scroll.modal.dropdown.off("scrollStart", scrollStart);\u000a				self.scroll.modal.dropdown.off("scrollEnd", scrollEnd);\u000a				self.scroll.modal.dropdown.off("scrollCancel", scrollEnd);\u000a			});\u000a\u000a		});\u000a\u000a	}\u000a}\u000a\u000aTouchUI.prototype.scroll.overlay = {\u000a\u000a	mainItems: ['#offline_overlay', '#reloadui_overlay'],\u000a	init: function() {\u000a		var self = this;\u000a\u000a		self.scroll.iScrolls.overlay = [];\u000a\u000a		$items = $(this.scroll.overlay.mainItems);\u000a		$items.each(function(ind, elm) {\u000a			var child = $(elm).children("#" + $(elm).attr("id") + "_wrapper");\u000a			var div = $('<div></div>').prependTo(elm);\u000a			child.appendTo(div);\u000a\u000a			$(elm).addClass("iscroll");\u000a\u000a			self.scroll.iScrolls.overlay[ind] = new IScroll(elm, self.scroll.defaults.iScroll);\u000a		});\u000a\u000a	},\u000a\u000a	refresh: function() {\u000a		var self = this;\u000a\u000a		setTimeout(function() {\u000a			$.each(self.scroll.iScrolls.overlay, function(ind) {\u000a				self.scroll.iScrolls.overlay[ind].refresh();\u000a			});\u000a		}, 0);\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.scroll.overwrite = function(terminalViewModel) {\u000a	var self = this;\u000a\u000a	if ( !this.settings.hasTouch ) {\u000a\u000a		// Enforce no scroll jumping\u000a		$("#scroll").on("scroll", function() {\u000a			if($("#scroll").scrollTop() !== 0) {\u000a				$("#scroll").scrollTop(0);\u000a			}\u000a		});\u000a\u000a		// Refresh terminal scroll height\u000a		terminalViewModel.displayedLines.subscribe(function() {\u000a			self.scroll.iScrolls.terminal.refresh();\u000a		});\u000a\u000a		// Overwrite scrollToEnd function with iScroll functions\u000a		terminalViewModel.scrollToEnd = function() {\u000a			self.scroll.iScrolls.terminal.refresh();\u000a			self.scroll.iScrolls.terminal.scrollTo(0, self.scroll.iScrolls.terminal.maxScrollY);\u000a		};\u000a\u000a		// Overwrite orginal helper, add one step and call the orginal function\u000a		var showOfflineOverlay = window.showOfflineOverlay;\u000a		window.showOfflineOverlay = function(title, message, reconnectCallback) {\u000a			showOfflineOverlay.call(this, title, message, reconnectCallback);\u000a			self.scroll.overlay.refresh.call(self);\u000a		};\u000a\u000a		// Overwrite orginal helper, add one step and call the orginal function\u000a		var showConfirmationDialog = window.showConfirmationDialog;\u000a		window.showConfirmationDialog = function(message, onacknowledge) {\u000a			self.scroll.iScrolls.body.scrollTo(0, 0, 500);\u000a			showConfirmationDialog.call(this, message, onacknowledge);\u000a		};\u000a\u000a		// Overwrite orginal helper, add one step and call the orginal function\u000a		var showReloadOverlay = $.fn.show;\u000a		$.fn.show = function(e,r,i) {\u000a			if($(this).hasClass("iscroll")) {\u000a				setTimeout(function() {\u000a					self.scroll.overlay.refresh.call(self);\u000a				}, 0);\u000a			}\u000a\u000a			return showReloadOverlay.call(this,e,r,i);\u000a		}\u000a\u000a	} else {\u000a\u000a		// Overwrite scrollToEnd function with #terminal-scroll as scroller\u000a		terminalViewModel.scrollToEnd = function() {\u000a			var $container = $("#terminal-scroll");\u000a			if ($container.length) {\u000a				$container.scrollTop($container[0].scrollHeight - $container.height())\u000a			}\u000a		}\u000a\u000a	}\u000a}\u000a\u000aTouchUI.prototype.scroll.terminal = {\u000a\u000a	init: function() {\u000a		var self = this;\u000a\u000a		// Create scrolling for terminal\u000a		self.scroll.iScrolls.terminal = new IScroll("#terminal-scroll", self.scroll.defaults.iScroll);\u000a\u000a		// Enforce the right scrollheight and disable main scrolling if we have a scrolling content\u000a		self.scroll.iScrolls.terminal.on("beforeScrollStart", function() {\u000a			self.scroll.iScrolls.terminal.refresh();\u000a\u000a			if(this.hasVerticalScroll) {\u000a				self.scroll.iScrolls.body.disable();\u000a			}\u000a		});\u000a		self.scroll.iScrolls.terminal.on("scrollEnd", function() {\u000a			self.scroll.iScrolls.body.enable();\u000a		});\u000a\u000a	}\u000a}\u000a\u000aTouchUI.prototype.DOM.create.dropdown = {\u000a\u000a	menuItem: {\u000a		cloneTo: $('#navbar ul.nav')\u000a	},\u000a	container: null,\u000a\u000a	init: function() {\u000a\u000a		this.menuItem.menu = $('' +\u000a			'<li id="all_touchui_settings" class="dropdown">' +\u000a				'<a href="#" class="dropdown-toggle" data-toggle="dropdown">' +\u000a					$('navbar_show_settings').text() +\u000a				'</a>' +\u000a			'</li>').prependTo(this.menuItem.cloneTo);\u000a\u000a		this.container = $('<ul class="dropdown-menu"></ul>').appendTo(this.menuItem.menu);\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.create.printer = {\u000a\u000a	menu: {\u000a		cloneTo: "#tabs"\u000a	},\u000a\u000a	container: {\u000a		cloneTo: "#temp"\u000a	},\u000a\u000a	move: {\u000a		$state: $("#state_wrapper"),\u000a		$files: $("#files_wrapper")\u000a	},\u000a\u000a	init: function( tabbar ) {\u000a		this.menu.$elm = tabbar.createItem("print_link", "printer", "tab").prependTo(this.menu.cloneTo);\u000a		this.container.$elm = $('<div id="printer" class="tab-pane active"><div class="row-fluid"></div></div>').insertBefore(this.container.cloneTo);\u000a\u000a		// Move the contents of the hidden accordions to the new print status and files tab\u000a		this.move.$state.appendTo(this.container.$elm.find(".row-fluid"));\u000a		this.move.$files.insertAfter(this.container.$elm.find(".row-fluid #state_wrapper"));\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.create.tabbar = {\u000a\u000a	createItem: function(itemId, linkId, toggle, text) {\u000a		text = (text) ? text : "";\u000a		return $('<li id="'+itemId+'"><a href="#'+linkId+'" data-toggle="'+toggle+'">'+text+'</a></li>');\u000a\u000a	}\u000a}\u000a\u000aTouchUI.prototype.DOM.create.webcam = {\u000a\u000a	menu: {\u000a		webcam: {\u000a			cloneTo: "#term_link"\u000a		}\u000a	},\u000a\u000a	container: {\u000a		cloneTo: ".tab-content",\u000a\u000a		webcam: {\u000a			$container: $("#webcam_container"),\u000a			cloneTo: "#webcam"\u000a		}\u000a	},\u000a\u000a	init: function( tabbar ) {\u000a		var self = this;\u000a\u000a		this.container.$elm = $('<div id="webcam" class="tab-pane"></div>').appendTo(this.container.cloneTo);\u000a		this.menu.webcam.$elm = tabbar.createItem("webcam_link", "webcam", "tab").insertBefore(this.menu.webcam.cloneTo);\u000a\u000a		this.container.webcam.$container.next().appendTo(this.container.webcam.cloneTo);\u000a		this.container.webcam.$container.prependTo(this.container.webcam.cloneTo);\u000a\u000a		$('<!-- ko allowBindings: false -->').insertBefore(this.container.$elm);\u000a		$('<!-- /ko -->').insertAfter(this.container.$elm);\u000a\u000a		$("#webcam_container").attr("data-bind", $("#webcam_container").attr("data-bind").replace("keydown: onKeyDown, ", ""));\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.move.afterTabAndNav = function() {\u000a\u000a	this.DOM.create.dropdown.container.children().each(function(ind, elm) {\u000a		var $elm = $(elm);\u000a		$('<!-- ko allowBindings: false -->').insertBefore($elm);\u000a		$('<!-- /ko -->').insertAfter($elm);\u000a	});\u000a\u000a	//Add hr before the settings icon\u000a	$('<li class="divider"></li>').insertBefore("#navbar_settings");\u000a	$('<li class="divider" id="divider_systemmenu" style="display: none;"></li>').insertBefore("#navbar_systemmenu").attr("data-bind", $("#navbar_systemmenu").attr("data-bind"));\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.move.connection = {\u000a	$container: null,\u000a	containerId: "connection_dialog",\u000a	$cloneContainer: $("#usersettings_dialog"),\u000a	$cloneModal: $("#connection_wrapper"),\u000a	cloneTo: "#all_touchui_settings > ul",\u000a\u000a	init: function( tabbar ) {\u000a		var text = this.$cloneModal.find(".accordion-heading").text().trim();\u000a\u000a		// Clone usersettings modal\u000a		this.$container = this.$cloneContainer.clone().attr("id", this.containerId).insertAfter(this.$cloneContainer);\u000a		this.$containerBody = this.$container.find(".modal-body");\u000a\u000a		// Remove all html from clone\u000a		this.$containerBody.html("");\u000a\u000a		// Append tab contents to modal\u000a		this.$cloneModal.appendTo(this.$containerBody);\u000a\u000a		// Set modal header to accordion header\u000a		this.$container.find(".modal-header h3").text(text);\u000a\u000a		// Create a link in the dropdown\u000a		this.$menuItem = tabbar.createItem("conn_link2", this.containerId, "modal", text)\u000a			.attr("data-bind", "visible: loginState.isAdmin")\u000a			.prependTo(this.cloneTo);\u000a	}\u000a}\u000a\u000aTouchUI.prototype.DOM.move.controls = {\u000a\u000a	init: function() {\u000a\u000a		// backward compatibility with <1.3.0\u000a		if($('#control-jog-feedrate').length === 0) {\u000a			var jogPanels = $('#control > .jog-panel');\u000a\u000a			$(jogPanels[0]).find(".jog-panel:nth-child(1)").attr("id", "control-jog-xy");\u000a			$(jogPanels[0]).find(".jog-panel:nth-child(2)").attr("id", "control-jog-z");\u000a			$(jogPanels[1]).attr("id", "control-jog-extrusion");\u000a			$(jogPanels[2]).attr("id", "control-jog-general");\u000a\u000a			$('<div class="jog-panel" id="control-jog-feedrate"></div>').insertAfter($(jogPanels[2]));\u000a			$(jogPanels[0]).find("> button:last-child").prependTo("#control-jog-feedrate");\u000a			$(jogPanels[0]).find("> input:last-child").prependTo("#control-jog-feedrate");\u000a			$(jogPanels[0]).find("> .slider:last-child").prependTo("#control-jog-feedrate");\u000a\u000a		}\u000a\u000a		$("#control-jog-feedrate").attr("data-bind", $("#control-jog-extrusion").data("bind")).insertAfter("#control-jog-extrusion");\u000a		$("#control-jog-extrusion button:last-child").prependTo("#control-jog-feedrate");\u000a		$("#control-jog-extrusion input:last-child").prependTo("#control-jog-feedrate");\u000a		$("#control-jog-extrusion .slider:last-child").prependTo("#control-jog-feedrate");\u000a\u000a		$("#control div.distance").prependTo("#control-jog-feedrate");\u000a		$("#control-jog-feedrate").insertBefore("#control-jog-extrusion");\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.move.navbar = {\u000a	mainItems: ['#all_touchui_settings', '#navbar_plugin_navbartemp', '#navbar_login', /*'#navbar_systemmenu',*/ '.hidden_touch'],\u000a	init: function() {\u000a\u000a		$items = $("#navbar ul.nav > li:not("+this.DOM.move.navbar.mainItems+")");\u000a		$items.each(function(ind, elm) {\u000a			var $elm = $(elm);\u000a			$elm.appendTo(this.DOM.create.dropdown.container);\u000a			$elm.find('a').text($elm.text().trim());\u000a		}.bind(this));\u000a\u000a		// Move TouchUI to main dropdown\u000a		$("#navbar_plugin_touchui").insertAfter("#navbar_settings");\u000a\u000a		// Create and Move login form to main dropdown\u000a		$('<li><ul id="youcanhazlogin"></ul></li>').insertAfter("#navbar_plugin_touchui");\u000a		$('#navbar_login').appendTo('#youcanhazlogin').find('a.dropdown-toggle').text($('#youcanhazlogin').find('a.dropdown-toggle').text().trim());\u000a\u000a		// Move the navbar temp plugin\u000a		this.plugins.navbarTemp.call(this);\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.move.overlays = {\u000a\u000a	mainItems: ['#offline_overlay', '#reloadui_overlay', '#drop_overlay'],\u000a	init: function() {\u000a\u000a		$(this.DOM.move.overlays.mainItems).each(function(ind, elm) {\u000a			var $elm = $(elm);\u000a			$elm.appendTo('body');\u000a		}.bind(this));\u000a\u000a	}\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.move.tabbar = {\u000a	mainItems: ['#print_link', '#temp_link', '#control_link', '#webcam_link', '#term_link', '.hidden_touch'],\u000a	init: function() {\u000a\u000a		$items = $("#tabs > li:not("+this.DOM.move.tabbar.mainItems+")");\u000a		$items.each(function(ind, elm) {\u000a			var $elm = $(elm);\u000a\u000a			// Clone the items into the dropdown, and make it click the orginal link\u000a			$elm.clone().attr("id", $elm.attr("id")+"2").appendTo("#all_touchui_settings .dropdown-menu").find('a').off("click").on("click", function(e) {\u000a				$elm.find('a').click();\u000a				$("#all_touchui_settings").addClass("item_active");\u000a				e.preventDefault();\u000a				return false;\u000a			});\u000a			$elm.addClass("hidden_touch");\u000a\u000a		}.bind(this));\u000a\u000a		$items = $("#tabs > li > a");\u000a		$items.each(function(ind, elm) {\u000a			$(elm).text("");\u000a		}.bind(this));\u000a\u000a	}\u000a}\u000a\u000aTouchUI.prototype.DOM.move.terminal = {\u000a\u000a	init: function() {\u000a\u000a		// Add version number placeholder\u000a		$('<span></span>').prependTo("#terminal-output");\u000a\u000a		// Create iScroll container for terminal\u000a		var container = $('<div id="terminal-scroll"></div>').insertBefore("#terminal-output");\u000a		var inner = $('<div id="terminal-scroll-inner"></div>').appendTo(container);\u000a		$("#terminal-output").appendTo(inner);\u000a		$("#terminal-output-lowfi").appendTo(inner);\u000a\u000a	}\u000a\u000a};\u000a\u000aTouchUI.prototype.DOM.overwrite.modal = function() {\u000a\u000a	//We need a reliable event for catching new modals for attaching a scrolling bar\u000a	$.fn.modalBup = $.fn.modal;\u000a	$.fn.modal = function(options, args) {\u000a		// Update any other modifications made by others (i.e. OctoPrint itself)\u000a		$.fn.modalBup.defaults = $.fn.modal.defaults;\u000a\u000a		// Create modal, store into variable so we can trigger an event first before return\u000a		var tmp = $(this).modalBup(options, args);\u000a		$(this).trigger("modal.touchui", this);\u000a		return tmp;\u000a	};\u000a	$.fn.modal.prototype = { constructor: $.fn.modal };\u000a	$.fn.modal.Constructor = $.fn.modal;\u000a	$.fn.modal.defaults = $.fn.modalBup.defaults;\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.overwrite.tabbar = function() {\u000a\u000a	// Force the webcam tab to load the webcam feed that original is located on the controls tab\u000a	$('#tabs [data-toggle=tab]').each(function(ind, elm) {\u000a\u000a		// Get the currently attached events to the toggle\u000a		var events = $.extend([], jQuery._data(elm, "events").show),\u000a			$elm = $(elm);\u000a\u000a		// Remove all previous set events and call them after manipulating a few things\u000a		$elm.off("show").on("show", function(e) {\u000a			var scope = this,\u000a				current = e.target.hash,\u000a				previous = e.relatedTarget.hash;\u000a\u000a			current = (current === "#control") ? "#control_without_webcam" : current;\u000a			current = (current === "#webcam") ? "#control" : current;\u000a\u000a			previous = (previous === "#control") ? "#control_without_webcam" : previous;\u000a			previous = (previous === "#webcam") ? "#control" : previous;\u000a\u000a			// Call previous unset functions (e.g. let's trigger the event onTabChange in all the viewModels)\u000a			$.each(events, function(key, event) {\u000a				event.handler.call(scope, {\u000a					target: {\u000a						hash: current\u000a					},\u000a					relatedTarget: {\u000a						hash: previous\u000a					}\u000a				});\u000a			});\u000a		})\u000a	});\u000a\u000a}\u000a\u000aTouchUI.prototype.DOM.overwrite.tabdrop = function() {\u000a	$.fn.tabdrop = function() {};\u000a	$.fn.tabdrop.prototype = { constructor: $.fn.tabdrop };\u000a	$.fn.tabdrop.Constructor = $.fn.tabdrop;\u000a}\u000a\u000a;\u000a
p0
.