V$(function() {\u000a    function GcodeFilesViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settingsViewModel = parameters[0];\u000a        self.loginState = parameters[1];\u000a        self.printerState = parameters[2];\u000a        self.slicing = parameters[3];\u000a\u000a        self.isErrorOrClosed = ko.observable(undefined);\u000a        self.isOperational = ko.observable(undefined);\u000a        self.isPrinting = ko.observable(undefined);\u000a        self.isPaused = ko.observable(undefined);\u000a        self.isError = ko.observable(undefined);\u000a        self.isReady = ko.observable(undefined);\u000a        self.isLoading = ko.observable(undefined);\u000a        self.isSdReady = ko.observable(undefined);\u000a\u000a        self.searchQuery = ko.observable(undefined);\u000a        self.searchQuery.subscribe(function() {\u000a            self.performSearch();\u000a        });\u000a\u000a        self.freeSpace = ko.observable(undefined);\u000a        self.totalSpace = ko.observable(undefined);\u000a        self.freeSpaceString = ko.pureComputed(function() {\u000a            if (!self.freeSpace())\u000a                return "-";\u000a            return formatSize(self.freeSpace());\u000a        });\u000a        self.totalSpaceString = ko.pureComputed(function() {\u000a            if (!self.totalSpace())\u000a                return "-";\u000a            return formatSize(self.totalSpace());\u000a        });\u000a\u000a        self.diskusageWarning = ko.pureComputed(function() {\u000a            return self.freeSpace() != undefined\u000a                && self.freeSpace() < self.settingsViewModel.server_diskspace_warning();\u000a        });\u000a        self.diskusageCritical = ko.pureComputed(function() {\u000a            return self.freeSpace() != undefined\u000a                && self.freeSpace() < self.settingsViewModel.server_diskspace_critical();\u000a        });\u000a        self.diskusageString = ko.pureComputed(function() {\u000a            if (self.diskusageCritical()) {\u000a                return gettext("Your available free disk space is critically low.");\u000a            } else if (self.diskusageWarning()) {\u000a                return gettext("Your available free disk space is starting to run low.");\u000a            } else {\u000a                return gettext("Your current disk usage.");\u000a            }\u000a        });\u000a\u000a        self.uploadButton = undefined;\u000a        self.sdUploadButton = undefined;\u000a        self.uploadProgressBar = undefined;\u000a        self.localTarget = undefined;\u000a        self.sdTarget = undefined;\u000a\u000a        // initialize list helper\u000a        self.listHelper = new ItemListHelper(\u000a            "gcodeFiles",\u000a            {\u000a                "name": function(a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase()) return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                },\u000a                "upload": function(a, b) {\u000a                    // sorts descending\u000a                    if (b["date"] === undefined || a["date"] > b["date"]) return -1;\u000a                    if (a["date"] < b["date"]) return 1;\u000a                    return 0;\u000a                },\u000a                "size": function(a, b) {\u000a                    // sorts descending\u000a                    if (b["size"] === undefined || a["size"] > b["size"]) return -1;\u000a                    if (a["size"] < b["size"]) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a                "printed": function(file) {\u000a                    return !(file["prints"] && file["prints"]["success"] && file["prints"]["success"] > 0);\u000a                },\u000a                "sd": function(file) {\u000a                    return file["origin"] && file["origin"] == "sdcard";\u000a                },\u000a                "local": function(file) {\u000a                    return !(file["origin"] && file["origin"] == "sdcard");\u000a                },\u000a                "machinecode": function(file) {\u000a                    return file["type"] && file["type"] == "machinecode";\u000a                },\u000a                "model": function(file) {\u000a                    return file["type"] && file["type"] == "model";\u000a                }\u000a            },\u000a            "name",\u000a            [],\u000a            [["sd", "local"], ["machinecode", "model"]],\u000a            0\u000a        );\u000a\u000a        self.isLoadActionPossible = ko.pureComputed(function() {\u000a            return self.loginState.isUser() && !self.isPrinting() && !self.isPaused() && !self.isLoading();\u000a        });\u000a\u000a        self.isLoadAndPrintActionPossible = ko.pureComputed(function() {\u000a            return self.loginState.isUser() && self.isOperational() && self.isLoadActionPossible();\u000a        });\u000a\u000a        self.printerState.filename.subscribe(function(newValue) {\u000a            self.highlightFilename(newValue);\u000a        });\u000a\u000a        self.highlightFilename = function(filename) {\u000a            if (filename == undefined) {\u000a                self.listHelper.selectNone();\u000a            } else {\u000a                self.listHelper.selectItem(function(item) {\u000a                    return item.name == filename;\u000a                });\u000a            }\u000a        };\u000a\u000a        self.fromCurrentData = function(data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self.fromHistoryData = function(data) {\u000a            self._processStateData(data.state);\u000a        };\u000a\u000a        self._processStateData = function(data) {\u000a            self.isErrorOrClosed(data.flags.closedOrError);\u000a            self.isOperational(data.flags.operational);\u000a            self.isPaused(data.flags.paused);\u000a            self.isPrinting(data.flags.printing);\u000a            self.isError(data.flags.error);\u000a            self.isReady(data.flags.ready);\u000a            self.isLoading(data.flags.loading);\u000a            self.isSdReady(data.flags.sdReady);\u000a        };\u000a\u000a        self._otherRequestInProgress = false;\u000a        self.requestData = function(filenameToFocus, locationToFocus) {\u000a            if (self._otherRequestInProgress) return;\u000a\u000a            self._otherRequestInProgress = true;\u000a            $.ajax({\u000a                url: API_BASEURL + "files",\u000a                method: "GET",\u000a                dataType: "json",\u000a                success: function(response) {\u000a                    self.fromResponse(response, filenameToFocus, locationToFocus);\u000a                    self._otherRequestInProgress = false;\u000a                },\u000a                error: function() {\u000a                    self._otherRequestInProgress = false;\u000a                }\u000a            });\u000a        };\u000a\u000a        self.fromResponse = function(response, filenameToFocus, locationToFocus) {\u000a            var files = response.files;\u000a            _.each(files, function(element, index, list) {\u000a                if (!element.hasOwnProperty("size")) element.size = undefined;\u000a                if (!element.hasOwnProperty("date")) element.date = undefined;\u000a            });\u000a            self.listHelper.updateItems(files);\u000a\u000a            if (filenameToFocus) {\u000a                // got a file to scroll to\u000a                if (locationToFocus === undefined) {\u000a                    locationToFocus = "local";\u000a                }\u000a                var entryElement = self.getEntryElement({name: filenameToFocus, origin: locationToFocus});\u000a                if (entryElement) {\u000a                    var entryOffset = entryElement.offsetTop;\u000a                    $(".gcode_files").slimScroll({ scrollTo: entryOffset + "px" });\u000a                }\u000a            }\u000a\u000a            if (response.free != undefined) {\u000a                self.freeSpace(response.free);\u000a            }\u000a\u000a            if (response.total != undefined) {\u000a                self.totalSpace(response.total);\u000a            }\u000a\u000a            self.highlightFilename(self.printerState.filename());\u000a        };\u000a\u000a        self.loadFile = function(file, printAfterLoad) {\u000a            if (!file || !file.refs || !file.refs.hasOwnProperty("resource")) return;\u000a\u000a            $.ajax({\u000a                url: file.refs.resource,\u000a                type: "POST",\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                data: JSON.stringify({command: "select", print: printAfterLoad})\u000a            });\u000a        };\u000a\u000a        self.removeFile = function(file) {\u000a            if (!file || !file.refs || !file.refs.hasOwnProperty("resource")) return;\u000a\u000a            $.ajax({\u000a                url: file.refs.resource,\u000a                type: "DELETE",\u000a                success: function() {\u000a                    self.requestData();\u000a                }\u000a            });\u000a        };\u000a\u000a        self.sliceFile = function(file) {\u000a            if (!file) return;\u000a\u000a            self.slicing.show(file.origin, file.name, true);\u000a        };\u000a\u000a        self.initSdCard = function() {\u000a            self._sendSdCommand("init");\u000a        };\u000a\u000a        self.releaseSdCard = function() {\u000a            self._sendSdCommand("release");\u000a        };\u000a\u000a        self.refreshSdFiles = function() {\u000a            self._sendSdCommand("refresh");\u000a        };\u000a\u000a        self._sendSdCommand = function(command) {\u000a            $.ajax({\u000a                url: API_BASEURL + "printer/sd",\u000a                type: "POST",\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                data: JSON.stringify({command: command})\u000a            });\u000a        };\u000a\u000a        self.downloadLink = function(data) {\u000a            if (data["refs"] && data["refs"]["download"]) {\u000a                return data["refs"]["download"];\u000a            } else {\u000a                return false;\u000a            }\u000a        };\u000a\u000a        self.lastTimePrinted = function(data) {\u000a            if (data["prints"] && data["prints"]["last"] && data["prints"]["last"]["date"]) {\u000a                return data["prints"]["last"]["date"];\u000a            } else {\u000a                return "-";\u000a            }\u000a        };\u000a\u000a        self.getSuccessClass = function(data) {\u000a            if (!data["prints"] || !data["prints"]["last"]) {\u000a                return "";\u000a            }\u000a            return data["prints"]["last"]["success"] ? "text-success" : "text-error";\u000a        };\u000a\u000a        self.templateFor = function(data) {\u000a            return "files_template_" + data.type;\u000a        };\u000a\u000a        self.getEntryId = function(data) {\u000a            return "gcode_file_" + md5(data["origin"] + ":" + data["name"]);\u000a        };\u000a\u000a        self.getEntryElement = function(data) {\u000a            var entryId = self.getEntryId(data);\u000a            var entryElements = $("#" + entryId);\u000a            if (entryElements && entryElements[0]) {\u000a                return entryElements[0];\u000a            } else {\u000a                return undefined;\u000a            }\u000a        };\u000a\u000a        self.enableRemove = function(data) {\u000a            return self.loginState.isUser() && !_.contains(self.printerState.busyFiles(), data.origin + ":" + data.name);\u000a        };\u000a\u000a        self.enableSelect = function(data, printAfterSelect) {\u000a            var isLoadActionPossible = self.loginState.isUser() && self.isOperational() && !(self.isPrinting() || self.isPaused() || self.isLoading());\u000a            return isLoadActionPossible && !self.listHelper.isSelected(data);\u000a        };\u000a\u000a        self.enableSlicing = function(data) {\u000a            return self.loginState.isUser() && self.slicing.enableSlicingDialog();\u000a        };\u000a\u000a        self.enableAdditionalData = function(data) {\u000a            return data["gcodeAnalysis"] || data["prints"] && data["prints"]["last"];\u000a        };\u000a\u000a        self.toggleAdditionalData = function(data) {\u000a            var entryElement = self.getEntryElement(data);\u000a            if (!entryElement) return;\u000a\u000a            var additionalInfo = $(".additionalInfo", entryElement);\u000a            additionalInfo.slideToggle("fast", function() {\u000a                $(".toggleAdditionalData i", entryElement).toggleClass("icon-chevron-down icon-chevron-up");\u000a            });\u000a        };\u000a\u000a        self.getAdditionalData = function(data) {\u000a            var output = "";\u000a            if (data["gcodeAnalysis"]) {\u000a                if (data["gcodeAnalysis"]["filament"] && typeof(data["gcodeAnalysis"]["filament"]) == "object") {\u000a                    var filament = data["gcodeAnalysis"]["filament"];\u000a                    if (_.keys(filament).length == 1) {\u000a                        output += gettext("Filament") + ": " + formatFilament(data["gcodeAnalysis"]["filament"]["tool" + 0]) + "<br>";\u000a                    } else if (_.keys(filament).length > 1) {\u000a                        for (var toolKey in filament) {\u000a                            if (!_.startsWith(toolKey, "tool") || !filament[toolKey] || !filament[toolKey].hasOwnProperty("length") || filament[toolKey]["length"] <= 0) continue;\u000a\u000a                            output += gettext("Filament") + " (" + gettext("Tool") + " " + toolKey.substr("tool".length) + "): " + formatFilament(filament[toolKey]) + "<br>";\u000a                        }\u000a                    }\u000a                }\u000a                output += gettext("Estimated Print Time") + ": " + formatDuration(data["gcodeAnalysis"]["estimatedPrintTime"]) + "<br>";\u000a            }\u000a            if (data["prints"] && data["prints"]["last"]) {\u000a                output += gettext("Last Printed") + ": " + formatTimeAgo(data["prints"]["last"]["date"]) + "<br>";\u000a                if (data["prints"]["last"]["lastPrintTime"]) {\u000a                    output += gettext("Last Print Time") + ": " + formatDuration(data["prints"]["last"]["lastPrintTime"]);\u000a                }\u000a            }\u000a            return output;\u000a        };\u000a\u000a        self.performSearch = function(e) {\u000a            var query = self.searchQuery();\u000a            if (query !== undefined && query.trim() != "") {\u000a                query = query.toLocaleLowerCase();\u000a                self.listHelper.changeSearchFunction(function(entry) {\u000a                    return entry && entry["name"].toLocaleLowerCase().indexOf(query) > -1;\u000a                });\u000a            } else {\u000a                self.listHelper.resetSearch();\u000a            }\u000a\u000a            return false;\u000a        };\u000a\u000a        self.onUserLoggedIn = function(user) {\u000a            self.uploadButton.fileupload("enable");\u000a        };\u000a\u000a        self.onUserLoggedOut = function() {\u000a            self.uploadButton.fileupload("disable");\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            $(".accordion-toggle[data-target='#files']").click(function() {\u000a                var files = $("#files");\u000a                if (files.hasClass("in")) {\u000a                    files.removeClass("overflow_visible");\u000a                } else {\u000a                    setTimeout(function() {\u000a                        files.addClass("overflow_visible");\u000a                    }, 100);\u000a                }\u000a            });\u000a\u000a            $(".gcode_files").slimScroll({\u000a                height: "306px",\u000a                size: "5px",\u000a                distance: "0",\u000a                railVisible: true,\u000a                alwaysVisible: true,\u000a                scrollBy: "102px"\u000a            });\u000a\u000a            //~~ Gcode upload\u000a\u000a            self.uploadButton = $("#gcode_upload");\u000a            self.sdUploadButton = $("#gcode_upload_sd");\u000a\u000a            self.uploadProgress = $("#gcode_upload_progress");\u000a            self.uploadProgressBar = $(".bar", self.uploadProgress);\u000a\u000a            if (CONFIG_SD_SUPPORT) {\u000a                self.localTarget = $("#drop_locally");\u000a            } else {\u000a                self.localTarget = $("#drop");\u000a                self.listHelper.removeFilter('sd');\u000a            }\u000a            self.sdTarget = $("#drop_sd");\u000a\u000a            self.loginState.isUser.subscribe(function(newValue) {\u000a                self._enableLocalDropzone(newValue);\u000a            });\u000a            self._enableLocalDropzone(self.loginState.isUser());\u000a\u000a            if (CONFIG_SD_SUPPORT) {\u000a                self.printerState.isSdReady.subscribe(function(newValue) {\u000a                    self._enableSdDropzone(newValue === true && self.loginState.isUser());\u000a                });\u000a\u000a                self.loginState.isUser.subscribe(function(newValue) {\u000a                    self._enableSdDropzone(newValue === true && self.printerState.isSdReady());\u000a                });\u000a\u000a                self._enableSdDropzone(self.printerState.isSdReady() && self.loginState.isUser());\u000a            }\u000a\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventUpdatedFiles = function(payload) {\u000a            if (payload.type == "gcode") {\u000a                self.requestData();\u000a            }\u000a        };\u000a\u000a        self.onEventSlicingDone = function(payload) {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventMetadataAnalysisFinished = function(payload) {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventMetadataStatisticsUpdated = function(payload) {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onEventTransferDone = function(payload) {\u000a            self.requestData(payload.remote, "sdcard");\u000a        };\u000a\u000a        self.onServerConnect = function(payload) {\u000a            self._enableDragNDrop(true);\u000a            self.requestData();\u000a        };\u000a\u000a        self.onServerReconnect = function(payload) {\u000a            self._enableDragNDrop(true);\u000a            self.requestData();\u000a        };\u000a\u000a        self.onServerDisconnect = function(payload) {\u000a            self._enableDragNDrop(false);\u000a        };\u000a\u000a        self._enableLocalDropzone = function(enable) {\u000a            var options = {\u000a                url: API_BASEURL + "files/local",\u000a                dataType: "json",\u000a                dropZone: enable ? self.localTarget : null,\u000a                done: self._handleUploadDone,\u000a                fail: self._handleUploadFail,\u000a                progressall: self._handleUploadProgress\u000a            };\u000a            self.uploadButton.fileupload(options);\u000a        };\u000a\u000a        self._enableSdDropzone = function(enable) {\u000a            var options = {\u000a                url: API_BASEURL + "files/sdcard",\u000a                dataType: "json",\u000a                dropZone: enable ? self.sdTarget : null,\u000a                done: self._handleUploadDone,\u000a                fail: self._handleUploadFail,\u000a                progressall: self._handleUploadProgress\u000a            };\u000a            self.sdUploadButton.fileupload(options);\u000a        };\u000a\u000a        self._enableDragNDrop = function(enable) {\u000a            if (enable) {\u000a                $(document).bind("dragover", self._handleDragNDrop);\u000a                log.debug("Enabled drag-n-drop");\u000a            } else {\u000a                $(document).unbind("dragover", self._handleDragNDrop);\u000a                log.debug("Disabled drag-n-drop");\u000a            }\u000a        };\u000a\u000a        self._handleUploadDone = function(e, data) {\u000a            var filename = undefined;\u000a            var location = undefined;\u000a            if (data.result.files.hasOwnProperty("sdcard")) {\u000a                filename = data.result.files.sdcard.name;\u000a                location = "sdcard";\u000a            } else if (data.result.files.hasOwnProperty("local")) {\u000a                filename = data.result.files.local.name;\u000a                location = "local";\u000a            }\u000a            self.requestData(filename, location);\u000a\u000a            if (_.endsWith(filename.toLowerCase(), ".stl")) {\u000a                self.slicing.show(location, filename);\u000a            }\u000a\u000a            if (data.result.done) {\u000a                self.uploadProgressBar\u000a                    .css("width", "0%")\u000a                    .text("");\u000a                self.uploadProgress\u000a                    .removeClass("progress-striped")\u000a                    .removeClass("active");\u000a            }\u000a        };\u000a\u000a        self._handleUploadFail = function(e, data) {\u000a            var error = "<p>" + gettext("Could not upload the file. Make sure that it is a GCODE file and has the extension \u005c".gcode\u005c" or \u005c".gco\u005c" or that it is an STL file with the extension \u005c".stl\u005c".") + "</p>";\u000a            error += pnotifyAdditionalInfo("<pre>" + data.jqXHR.responseText + "</pre>");\u000a            new PNotify({\u000a                title: "Upload failed",\u000a                text: error,\u000a                type: "error",\u000a                hide: false\u000a            });\u000a            self.uploadProgressBar\u000a                .css("width", "0%")\u000a                .text("");\u000a            self.uploadProgress\u000a                .removeClass("progress-striped")\u000a                .removeClass("active");\u000a        };\u000a\u000a        self._handleUploadProgress = function(e, data) {\u000a            var progress = parseInt(data.loaded / data.total * 100, 10);\u000a\u000a            self.uploadProgressBar\u000a                .css("width", progress + "%")\u000a                .text(gettext("Uploading ..."));\u000a\u000a            if (progress >= 100) {\u000a                self.uploadProgress\u000a                    .addClass("progress-striped")\u000a                    .addClass("active");\u000a                self.uploadProgressBar\u000a                    .text(gettext("Saving ..."));\u000a            }\u000a        };\u000a\u000a        self._handleDragNDrop = function (e) {\u000a            var dropOverlay = $("#drop_overlay");\u000a            var dropZone = $("#drop");\u000a            var dropZoneLocal = $("#drop_locally");\u000a            var dropZoneSd = $("#drop_sd");\u000a            var dropZoneBackground = $("#drop_background");\u000a            var dropZoneLocalBackground = $("#drop_locally_background");\u000a            var dropZoneSdBackground = $("#drop_sd_background");\u000a            var timeout = window.dropZoneTimeout;\u000a\u000a            if (!timeout) {\u000a                dropOverlay.addClass('in');\u000a            } else {\u000a                clearTimeout(timeout);\u000a            }\u000a\u000a            var foundLocal = false;\u000a            var foundSd = false;\u000a            var found = false;\u000a            var node = e.target;\u000a            do {\u000a                if (dropZoneLocal && node === dropZoneLocal[0]) {\u000a                    foundLocal = true;\u000a                    break;\u000a                } else if (dropZoneSd && node === dropZoneSd[0]) {\u000a                    foundSd = true;\u000a                    break;\u000a                } else if (dropZone && node === dropZone[0]) {\u000a                    found = true;\u000a                    break;\u000a                }\u000a                node = node.parentNode;\u000a            } while (node != null);\u000a\u000a            if (foundLocal) {\u000a                dropZoneLocalBackground.addClass("hover");\u000a                dropZoneSdBackground.removeClass("hover");\u000a            } else if (foundSd && self.printerState.isSdReady()) {\u000a                dropZoneSdBackground.addClass("hover");\u000a                dropZoneLocalBackground.removeClass("hover");\u000a            } else if (found) {\u000a                dropZoneBackground.addClass("hover");\u000a            } else {\u000a                if (dropZoneLocalBackground) dropZoneLocalBackground.removeClass("hover");\u000a                if (dropZoneSdBackground) dropZoneSdBackground.removeClass("hover");\u000a                if (dropZoneBackground) dropZoneBackground.removeClass("hover");\u000a            }\u000a\u000a            window.dropZoneTimeout = setTimeout(function () {\u000a                window.dropZoneTimeout = null;\u000a                dropOverlay.removeClass("in");\u000a                if (dropZoneLocal) dropZoneLocalBackground.removeClass("hover");\u000a                if (dropZoneSd) dropZoneSdBackground.removeClass("hover");\u000a                if (dropZone) dropZoneBackground.removeClass("hover");\u000a            }, 100);\u000a        }\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        GcodeFilesViewModel,\u000a        ["settingsViewModel", "loginStateViewModel", "printerStateViewModel", "slicingViewModel"],\u000a        "#files_wrapper"\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.