V$(function() {\u000a    function SettingsViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.users = parameters[1];\u000a        self.printerProfiles = parameters[2];\u000a        self.about = parameters[3];\u000a\u000a        self.receiving = ko.observable(false);\u000a        self.sending = ko.observable(false);\u000a        self.exchanging = ko.pureComputed(function() {\u000a            return self.receiving() || self.sending();\u000a        });\u000a        self.callbacks = [];\u000a\u000a        self.api_enabled = ko.observable(undefined);\u000a        self.api_key = ko.observable(undefined);\u000a        self.api_allowCrossOrigin = ko.observable(undefined);\u000a\u000a        self.appearance_name = ko.observable(undefined);\u000a        self.appearance_color = ko.observable(undefined);\u000a        self.appearance_colorTransparent = ko.observable();\u000a        self.appearance_defaultLanguage = ko.observable();\u000a\u000a        self.settingsDialog = undefined;\u000a        self.translationManagerDialog = undefined;\u000a        self.translationUploadElement = $("#settings_appearance_managelanguagesdialog_upload");\u000a        self.translationUploadButton = $("#settings_appearance_managelanguagesdialog_upload_start");\u000a\u000a        self.translationUploadFilename = ko.observable();\u000a        self.invalidTranslationArchive = ko.pureComputed(function() {\u000a            var name = self.translationUploadFilename();\u000a            return name !== undefined && !(_.endsWith(name.toLocaleLowerCase(), ".zip") || _.endsWith(name.toLocaleLowerCase(), ".tar.gz") || _.endsWith(name.toLocaleLowerCase(), ".tgz") || _.endsWith(name.toLocaleLowerCase(), ".tar"));\u000a        });\u000a        self.enableTranslationUpload = ko.pureComputed(function() {\u000a            var name = self.translationUploadFilename();\u000a            return name !== undefined && name.trim() != "" && !self.invalidTranslationArchive();\u000a        });\u000a\u000a        self.translations = new ItemListHelper(\u000a            "settings.translations",\u000a            {\u000a                "locale": function (a, b) {\u000a                    // sorts ascending\u000a                    if (a["locale"].toLocaleLowerCase() < b["locale"].toLocaleLowerCase()) return -1;\u000a                    if (a["locale"].toLocaleLowerCase() > b["locale"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a            },\u000a            "locale",\u000a            [],\u000a            [],\u000a            0\u000a        );\u000a\u000a        self.appearance_available_colors = ko.observable([\u000a            {key: "default", name: gettext("default")},\u000a            {key: "red", name: gettext("red")},\u000a            {key: "orange", name: gettext("orange")},\u000a            {key: "yellow", name: gettext("yellow")},\u000a            {key: "green", name: gettext("green")},\u000a            {key: "blue", name: gettext("blue")},\u000a            {key: "violet", name: gettext("violet")},\u000a            {key: "black", name: gettext("black")},\u000a            {key: "white", name: gettext("white")},\u000a        ]);\u000a\u000a        self.appearance_colorName = function(color) {\u000a            switch (color) {\u000a                case "red":\u000a                    return gettext("red");\u000a                case "orange":\u000a                    return gettext("orange");\u000a                case "yellow":\u000a                    return gettext("yellow");\u000a                case "green":\u000a                    return gettext("green");\u000a                case "blue":\u000a                    return gettext("blue");\u000a                case "violet":\u000a                    return gettext("violet");\u000a                case "black":\u000a                    return gettext("black");\u000a                case "white":\u000a                    return gettext("white");\u000a                case "default":\u000a                    return gettext("default");\u000a                default:\u000a                    return color;\u000a            }\u000a        };\u000a\u000a        var auto_locale = {language: "_default", display: gettext("Autodetect from browser"), english: undefined};\u000a        self.locales = ko.observableArray([auto_locale].concat(_.sortBy(_.values(AVAILABLE_LOCALES), function(n) {\u000a            return n.display;\u000a        })));\u000a        self.locale_languages = _.keys(AVAILABLE_LOCALES);\u000a\u000a        self.printer_defaultExtrusionLength = ko.observable(undefined);\u000a\u000a        self.webcam_streamUrl = ko.observable(undefined);\u000a        self.webcam_snapshotUrl = ko.observable(undefined);\u000a        self.webcam_ffmpegPath = ko.observable(undefined);\u000a        self.webcam_bitrate = ko.observable(undefined);\u000a        self.webcam_ffmpegThreads = ko.observable(undefined);\u000a        self.webcam_watermark = ko.observable(undefined);\u000a        self.webcam_flipH = ko.observable(undefined);\u000a        self.webcam_flipV = ko.observable(undefined);\u000a        self.webcam_rotate90 = ko.observable(undefined);\u000a\u000a        self.feature_gcodeViewer = ko.observable(undefined);\u000a        self.feature_temperatureGraph = ko.observable(undefined);\u000a        self.feature_waitForStart = ko.observable(undefined);\u000a        self.feature_alwaysSendChecksum = ko.observable(undefined);\u000a        self.feature_sdSupport = ko.observable(undefined);\u000a        self.feature_sdAlwaysAvailable = ko.observable(undefined);\u000a        self.feature_swallowOkAfterResend = ko.observable(undefined);\u000a        self.feature_repetierTargetTemp = ko.observable(undefined);\u000a        self.feature_disableExternalHeatupDetection = ko.observable(undefined);\u000a        self.feature_keyboardControl = ko.observable(undefined);\u000a        self.feature_pollWatched = ko.observable(undefined);\u000a        self.feature_ignoreIdenticalResends = ko.observable(undefined);\u000a\u000a        self.serial_port = ko.observable();\u000a        self.serial_baudrate = ko.observable();\u000a        self.serial_portOptions = ko.observableArray([]);\u000a        self.serial_baudrateOptions = ko.observableArray([]);\u000a        self.serial_autoconnect = ko.observable(undefined);\u000a        self.serial_timeoutConnection = ko.observable(undefined);\u000a        self.serial_timeoutDetection = ko.observable(undefined);\u000a        self.serial_timeoutCommunication = ko.observable(undefined);\u000a        self.serial_timeoutTemperature = ko.observable(undefined);\u000a        self.serial_timeoutSdStatus = ko.observable(undefined);\u000a        self.serial_log = ko.observable(undefined);\u000a        self.serial_additionalPorts = ko.observable(undefined);\u000a        self.serial_longRunningCommands = ko.observable(undefined);\u000a        self.serial_checksumRequiringCommands = ko.observable(undefined);\u000a        self.serial_helloCommand = ko.observable(undefined);\u000a        self.serial_ignoreErrorsFromFirmware = ko.observable(undefined);\u000a        self.serial_disconnectOnErrors = ko.observable(undefined);\u000a        self.serial_triggerOkForM29 = ko.observable(undefined);\u000a        self.serial_supportResendsWithoutOk = ko.observable(undefined);\u000a\u000a        self.folder_uploads = ko.observable(undefined);\u000a        self.folder_timelapse = ko.observable(undefined);\u000a        self.folder_timelapseTmp = ko.observable(undefined);\u000a        self.folder_logs = ko.observable(undefined);\u000a        self.folder_watched = ko.observable(undefined);\u000a\u000a        self.scripts_gcode_beforePrintStarted = ko.observable(undefined);\u000a        self.scripts_gcode_afterPrintDone = ko.observable(undefined);\u000a        self.scripts_gcode_afterPrintCancelled = ko.observable(undefined);\u000a        self.scripts_gcode_afterPrintPaused = ko.observable(undefined);\u000a        self.scripts_gcode_beforePrintResumed = ko.observable(undefined);\u000a        self.scripts_gcode_afterPrinterConnected = ko.observable(undefined);\u000a\u000a        self.temperature_profiles = ko.observableArray(undefined);\u000a        self.temperature_cutoff = ko.observable(undefined);\u000a\u000a        self.system_actions = ko.observableArray([]);\u000a\u000a        self.terminalFilters = ko.observableArray([]);\u000a\u000a        self.server_commands_systemShutdownCommand = ko.observable(undefined);\u000a        self.server_commands_systemRestartCommand = ko.observable(undefined);\u000a        self.server_commands_serverRestartCommand = ko.observable(undefined);\u000a\u000a        self.server_diskspace_warning = ko.observable();\u000a        self.server_diskspace_critical = ko.observable();\u000a        self.server_diskspace_warning_str = sizeObservable(self.server_diskspace_warning);\u000a        self.server_diskspace_critical_str = sizeObservable(self.server_diskspace_critical);\u000a\u000a        self.settings = undefined;\u000a\u000a        self.addTemperatureProfile = function() {\u000a            self.temperature_profiles.push({name: "New", extruder:0, bed:0});\u000a        };\u000a\u000a        self.removeTemperatureProfile = function(profile) {\u000a            self.temperature_profiles.remove(profile);\u000a        };\u000a\u000a        self.addTerminalFilter = function() {\u000a            self.terminalFilters.push({name: "New", regex: "(Send: M105)|(Recv: ok T:)"})\u000a        };\u000a\u000a        self.removeTerminalFilter = function(filter) {\u000a            self.terminalFilters.remove(filter);\u000a        };\u000a\u000a        self.onSettingsShown = function() {\u000a          self.requestData();\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            self.settingsDialog = $('#settings_dialog');\u000a            self.translationManagerDialog = $('#settings_appearance_managelanguagesdialog');\u000a            self.translationUploadElement = $("#settings_appearance_managelanguagesdialog_upload");\u000a            self.translationUploadButton = $("#settings_appearance_managelanguagesdialog_upload_start");\u000a\u000a            self.translationUploadElement.fileupload({\u000a                dataType: "json",\u000a                maxNumberOfFiles: 1,\u000a                autoUpload: false,\u000a                add: function(e, data) {\u000a                    if (data.files.length == 0) {\u000a                        return false;\u000a                    }\u000a\u000a                    self.translationUploadFilename(data.files[0].name);\u000a\u000a                    self.translationUploadButton.unbind("click");\u000a                    self.translationUploadButton.bind("click", function() {\u000a                        data.submit();\u000a                        return false;\u000a                    });\u000a                },\u000a                done: function(e, data) {\u000a                    self.translationUploadButton.unbind("click");\u000a                    self.translationUploadFilename(undefined);\u000a                    self.fromTranslationResponse(data.result);\u000a                },\u000a                fail: function(e, data) {\u000a                    self.translationUploadButton.unbind("click");\u000a                    self.translationUploadFilename(undefined);\u000a                }\u000a            });\u000a        };\u000a\u000a        self.onAllBound = function(allViewModels) {\u000a            self.settingsDialog.on('show', function(event) {\u000a                if (event.target.id == "settings_dialog") {\u000a                    self.requestTranslationData();\u000a                    _.each(allViewModels, function(viewModel) {\u000a                        if (viewModel.hasOwnProperty("onSettingsShown")) {\u000a                            viewModel.onSettingsShown();\u000a                        }\u000a                    });\u000a                }\u000a            });\u000a            self.settingsDialog.on('hidden', function(event) {\u000a                if (event.target.id == "settings_dialog") {\u000a                    _.each(allViewModels, function(viewModel) {\u000a                        if (viewModel.hasOwnProperty("onSettingsHidden")) {\u000a                            viewModel.onSettingsHidden();\u000a                        }\u000a                    });\u000a                }\u000a            });\u000a            self.settingsDialog.on('beforeSave', function () {\u000a                _.each(allViewModels, function (viewModel) {\u000a                    if (viewModel.hasOwnProperty("onSettingsBeforeSave")) {\u000a                        viewModel.onSettingsBeforeSave();\u000a                    }\u000a                });\u000a            });\u000a\u000a            // reset scroll position on tab change\u000a            $('ul.nav-list a[data-toggle="tab"]', self.settingsDialog).on("show", function() {\u000a                self._resetScrollPosition();\u000a            });\u000a        };\u000a\u000a        self.show = function(tab) {\u000a            // select first or specified tab\u000a            self.selectTab(tab);\u000a\u000a            // reset scroll position\u000a            self._resetScrollPosition();\u000a\u000a            // show settings, ensure centered position\u000a            self.settingsDialog.modal({\u000a                minHeight: function() { return Math.max($.fn.modal.defaults.maxHeight() - 80, 250); }\u000a            }).css({\u000a                width: 'auto',\u000a                'margin-left': function() { return -($(this).width() /2); }\u000a            });\u000a\u000a            return false;\u000a        };\u000a\u000a        self.hide = function() {\u000a            self.settingsDialog.modal("hide");\u000a        };\u000a\u000a        self.showTranslationManager = function() {\u000a            self.translationManagerDialog.modal();\u000a            return false;\u000a        };\u000a\u000a        self.requestData = function(callback) {\u000a            if (self.receiving()) {\u000a                if (callback) {\u000a                    self.callbacks.push(callback);\u000a                }\u000a                return;\u000a            }\u000a\u000a            self.receiving(true);\u000a            $.ajax({\u000a                url: API_BASEURL + "settings",\u000a                type: "GET",\u000a                dataType: "json",\u000a                success: function(response) {\u000a                    if (callback) {\u000a                        self.callbacks.push(callback);\u000a                    }\u000a\u000a                    try {\u000a                        self.fromResponse(response);\u000a\u000a                        var cb;\u000a                        while (self.callbacks.length) {\u000a                            cb = self.callbacks.shift();\u000a                            try {\u000a                                cb();\u000a                            } catch(exc) {\u000a                                log.error("Error calling settings callback", cb, ":", (exc.stack || exc));\u000a                            }\u000a                        }\u000a                    } finally {\u000a                        self.receiving(false);\u000a                        self.callbacks = [];\u000a                    }\u000a                },\u000a                error: function(xhr) {\u000a                    self.receiving(false);\u000a                }\u000a            });\u000a        };\u000a\u000a        self.requestTranslationData = function(callback) {\u000a            $.ajax({\u000a                url: API_BASEURL + "languages",\u000a                type: "GET",\u000a                dataType: "json",\u000a                success: function(response) {\u000a                    self.fromTranslationResponse(response);\u000a                    if (callback) callback();\u000a                }\u000a            })\u000a        };\u000a\u000a        self.fromTranslationResponse = function(response) {\u000a            var translationsByLocale = {};\u000a            _.each(response.language_packs, function(item, key) {\u000a                _.each(item.languages, function(pack) {\u000a                    var locale = pack.locale;\u000a                    if (!_.has(translationsByLocale, locale)) {\u000a                        translationsByLocale[locale] = {\u000a                            locale: locale,\u000a                            display: pack.locale_display,\u000a                            english: pack.locale_english,\u000a                            packs: []\u000a                        };\u000a                    }\u000a\u000a                    translationsByLocale[locale]["packs"].push({\u000a                        identifier: key,\u000a                        display: item.display,\u000a                        pack: pack\u000a                    });\u000a                });\u000a            });\u000a\u000a            var translations = [];\u000a            _.each(translationsByLocale, function(item) {\u000a                item["packs"].sort(function(a, b) {\u000a                    if (a.identifier == "_core") return -1;\u000a                    if (b.identifier == "_core") return 1;\u000a\u000a                    if (a.display < b.display) return -1;\u000a                    if (a.display > b.display) return 1;\u000a                    return 0;\u000a                });\u000a                translations.push(item);\u000a            });\u000a\u000a            self.translations.updateItems(translations);\u000a        };\u000a\u000a        self.languagePackDisplay = function(item) {\u000a            return item.display + ((item.english != undefined) ? ' (' + item.english + ')' : '');\u000a        };\u000a\u000a        self.languagePacksAvailable = ko.pureComputed(function() {\u000a            return self.translations.allSize() > 0;\u000a        });\u000a\u000a        self.deleteLanguagePack = function(locale, pack) {\u000a            $.ajax({\u000a                url: API_BASEURL + "languages/" + locale + "/" + pack,\u000a                type: "DELETE",\u000a                dataType: "json",\u000a                success: function(response) {\u000a                    self.fromTranslationResponse(response);\u000a                }\u000a            })\u000a        };\u000a\u000a        self.fromResponse = function(response) {\u000a            if (self.settings === undefined) {\u000a                self.settings = ko.mapping.fromJS(response);\u000a            } else {\u000a                ko.mapping.fromJS(response, self.settings);\u000a            }\u000a\u000a            self.api_enabled(response.api.enabled);\u000a            self.api_key(response.api.key);\u000a            self.api_allowCrossOrigin(response.api.allowCrossOrigin);\u000a\u000a            self.appearance_name(response.appearance.name);\u000a            self.appearance_color(response.appearance.color);\u000a            self.appearance_colorTransparent(response.appearance.colorTransparent);\u000a            self.appearance_defaultLanguage("_default");\u000a            if (_.includes(self.locale_languages, response.appearance.defaultLanguage)) {\u000a                self.appearance_defaultLanguage(response.appearance.defaultLanguage);\u000a            }\u000a\u000a            self.printer_defaultExtrusionLength(response.printer.defaultExtrusionLength);\u000a\u000a            self.webcam_streamUrl(response.webcam.streamUrl);\u000a            self.webcam_snapshotUrl(response.webcam.snapshotUrl);\u000a            self.webcam_ffmpegPath(response.webcam.ffmpegPath);\u000a            self.webcam_bitrate(response.webcam.bitrate);\u000a            self.webcam_ffmpegThreads(response.webcam.ffmpegThreads);\u000a            self.webcam_watermark(response.webcam.watermark);\u000a            self.webcam_flipH(response.webcam.flipH);\u000a            self.webcam_flipV(response.webcam.flipV);\u000a            self.webcam_rotate90(response.webcam.rotate90);\u000a\u000a            self.feature_gcodeViewer(response.feature.gcodeViewer);\u000a            self.feature_temperatureGraph(response.feature.temperatureGraph);\u000a            self.feature_waitForStart(response.feature.waitForStart);\u000a            self.feature_alwaysSendChecksum(response.feature.alwaysSendChecksum);\u000a            self.feature_sdSupport(response.feature.sdSupport);\u000a            self.feature_sdAlwaysAvailable(response.feature.sdAlwaysAvailable);\u000a            self.feature_swallowOkAfterResend(response.feature.swallowOkAfterResend);\u000a            self.feature_repetierTargetTemp(response.feature.repetierTargetTemp);\u000a            self.feature_disableExternalHeatupDetection(!response.feature.externalHeatupDetection);\u000a            self.feature_keyboardControl(response.feature.keyboardControl);\u000a            self.feature_pollWatched(response.feature.pollWatched);\u000a\u000a            self.serial_port(response.serial.port);\u000a            self.serial_baudrate(response.serial.baudrate);\u000a            self.serial_portOptions(response.serial.portOptions);\u000a            self.serial_baudrateOptions(response.serial.baudrateOptions);\u000a            self.serial_autoconnect(response.serial.autoconnect);\u000a            self.serial_timeoutConnection(response.serial.timeoutConnection);\u000a            self.serial_timeoutDetection(response.serial.timeoutDetection);\u000a            self.serial_timeoutCommunication(response.serial.timeoutCommunication);\u000a            self.serial_timeoutTemperature(response.serial.timeoutTemperature);\u000a            self.serial_timeoutSdStatus(response.serial.timeoutSdStatus);\u000a            self.serial_log(response.serial.log);\u000a            self.serial_additionalPorts(response.serial.additionalPorts.join("\u005cn"));\u000a            self.serial_longRunningCommands(response.serial.longRunningCommands.join(", "));\u000a            self.serial_checksumRequiringCommands(response.serial.checksumRequiringCommands.join(", "));\u000a            self.serial_helloCommand(response.serial.helloCommand);\u000a            self.serial_ignoreErrorsFromFirmware(response.serial.ignoreErrorsFromFirmware);\u000a            self.serial_disconnectOnErrors(response.serial.disconnectOnErrors);\u000a            self.serial_triggerOkForM29(response.serial.triggerOkForM29);\u000a            self.serial_supportResendsWithoutOk(response.serial.supportResendsWithoutOk);\u000a\u000a            self.folder_uploads(response.folder.uploads);\u000a            self.folder_timelapse(response.folder.timelapse);\u000a            self.folder_timelapseTmp(response.folder.timelapseTmp);\u000a            self.folder_logs(response.folder.logs);\u000a            self.folder_watched(response.folder.watched);\u000a\u000a            self.temperature_profiles(response.temperature.profiles);\u000a\u000a            self.scripts_gcode_beforePrintStarted(response.scripts.gcode.beforePrintStarted);\u000a            self.scripts_gcode_afterPrintDone(response.scripts.gcode.afterPrintDone);\u000a            self.scripts_gcode_afterPrintCancelled(response.scripts.gcode.afterPrintCancelled);\u000a            self.scripts_gcode_afterPrintPaused(response.scripts.gcode.afterPrintPaused);\u000a            self.scripts_gcode_beforePrintResumed(response.scripts.gcode.beforePrintResumed);\u000a            self.scripts_gcode_afterPrinterConnected(response.scripts.gcode.afterPrinterConnected);\u000a\u000a            self.temperature_profiles(response.temperature.profiles);\u000a            self.temperature_cutoff(response.temperature.cutoff);\u000a\u000a            self.system_actions(response.system.actions);\u000a\u000a            self.terminalFilters(response.terminalFilters);\u000a\u000a            self.server_commands_systemShutdownCommand(response.server.commands.systemShutdownCommand);\u000a            self.server_commands_systemRestartCommand(response.server.commands.systemRestartCommand);\u000a            self.server_commands_serverRestartCommand(response.server.commands.serverRestartCommand);\u000a        };\u000a\u000a        self.saveData = function (data, successCallback) {\u000a            self.settingsDialog.trigger("beforeSave");\u000a\u000a            if (data == undefined) {\u000a                // we only set sending to true when we didn't include data\u000a                self.sending(true);\u000a                data = ko.mapping.toJS(self.settings);\u000a\u000a                data = _.extend(data, {\u000a                    "api" : {\u000a                        "enabled": self.api_enabled(),\u000a                        "key": self.api_key(),\u000a                        "allowCrossOrigin": self.api_allowCrossOrigin()\u000a                    },\u000a                    "appearance" : {\u000a                        "name": self.appearance_name(),\u000a                        "color": self.appearance_color(),\u000a                        "colorTransparent": self.appearance_colorTransparent(),\u000a                        "defaultLanguage": self.appearance_defaultLanguage()\u000a                    },\u000a                    "printer": {\u000a                        "defaultExtrusionLength": self.printer_defaultExtrusionLength()\u000a                    },\u000a                    "webcam": {\u000a                        "streamUrl": self.webcam_streamUrl(),\u000a                        "snapshotUrl": self.webcam_snapshotUrl(),\u000a                        "ffmpegPath": self.webcam_ffmpegPath(),\u000a                        "bitrate": self.webcam_bitrate(),\u000a                        "ffmpegThreads": self.webcam_ffmpegThreads(),\u000a                        "watermark": self.webcam_watermark(),\u000a                        "flipH": self.webcam_flipH(),\u000a                        "flipV": self.webcam_flipV(),\u000a                        "rotate90": self.webcam_rotate90()\u000a                    },\u000a                    "feature": {\u000a                        "gcodeViewer": self.feature_gcodeViewer(),\u000a                        "temperatureGraph": self.feature_temperatureGraph(),\u000a                        "waitForStart": self.feature_waitForStart(),\u000a                        "alwaysSendChecksum": self.feature_alwaysSendChecksum(),\u000a                        "sdSupport": self.feature_sdSupport(),\u000a                        "sdAlwaysAvailable": self.feature_sdAlwaysAvailable(),\u000a                        "swallowOkAfterResend": self.feature_swallowOkAfterResend(),\u000a                        "repetierTargetTemp": self.feature_repetierTargetTemp(),\u000a                        "externalHeatupDetection": !self.feature_disableExternalHeatupDetection(),\u000a                        "keyboardControl": self.feature_keyboardControl(),\u000a                        "pollWatched": self.feature_pollWatched()\u000a                    },\u000a                    "serial": {\u000a                        "port": self.serial_port(),\u000a                        "baudrate": self.serial_baudrate(),\u000a                        "autoconnect": self.serial_autoconnect(),\u000a                        "timeoutConnection": self.serial_timeoutConnection(),\u000a                        "timeoutDetection": self.serial_timeoutDetection(),\u000a                        "timeoutCommunication": self.serial_timeoutCommunication(),\u000a                        "timeoutTemperature": self.serial_timeoutTemperature(),\u000a                        "timeoutSdStatus": self.serial_timeoutSdStatus(),\u000a                        "log": self.serial_log(),\u000a                        "additionalPorts": commentableLinesToArray(self.serial_additionalPorts()),\u000a                        "longRunningCommands": splitTextToArray(self.serial_longRunningCommands(), ",", true),\u000a                        "checksumRequiringCommands": splitTextToArray(self.serial_checksumRequiringCommands(), ",", true),\u000a                        "helloCommand": self.serial_helloCommand(),\u000a                        "ignoreErrorsFromFirmware": self.serial_ignoreErrorsFromFirmware(),\u000a                        "disconnectOnErrors": self.serial_disconnectOnErrors(),\u000a                        "triggerOkForM29": self.serial_triggerOkForM29(),\u000a                        "supportResendsWithoutOk": self.serial_supportResendsWithoutOk()\u000a                    },\u000a                    "folder": {\u000a                        "uploads": self.folder_uploads(),\u000a                        "timelapse": self.folder_timelapse(),\u000a                        "timelapseTmp": self.folder_timelapseTmp(),\u000a                        "logs": self.folder_logs(),\u000a                        "watched": self.folder_watched()\u000a                    },\u000a                    "temperature": {\u000a                        "profiles": self.temperature_profiles(),\u000a                        "cutoff": self.temperature_cutoff()\u000a                    },\u000a                    "system": {\u000a                        "actions": self.system_actions()\u000a                    },\u000a                    "terminalFilters": self.terminalFilters(),\u000a                    "scripts": {\u000a                        "gcode": {\u000a                            "beforePrintStarted": self.scripts_gcode_beforePrintStarted(),\u000a                            "afterPrintDone": self.scripts_gcode_afterPrintDone(),\u000a                            "afterPrintCancelled": self.scripts_gcode_afterPrintCancelled(),\u000a                            "afterPrintPaused": self.scripts_gcode_afterPrintPaused(),\u000a                            "beforePrintResumed": self.scripts_gcode_beforePrintResumed(),\u000a                            "afterPrinterConnected": self.scripts_gcode_afterPrinterConnected()\u000a                        }\u000a                    },\u000a                    "server": {\u000a                        "commands": {\u000a                            "systemShutdownCommand": self.server_commands_systemShutdownCommand(),\u000a                            "systemRestartCommand": self.server_commands_systemRestartCommand(),\u000a                            "serverRestartCommand": self.server_commands_serverRestartCommand()\u000a                        }\u000a                    }\u000a                });\u000a            }\u000a\u000a            $.ajax({\u000a                url: API_BASEURL + "settings",\u000a                type: "POST",\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                data: JSON.stringify(data),\u000a                success: function(response) {\u000a                    self.receiving(true);\u000a                    self.sending(false);\u000a                    try {\u000a                        self.fromResponse(response);\u000a                        if (successCallback) successCallback(response);\u000a                    } finally {\u000a                        self.receiving(false);\u000a                    }\u000a                },\u000a                error: function(xhr) {\u000a                    self.sending(false);\u000a                }\u000a            });\u000a        };\u000a\u000a        self.onEventSettingsUpdated = function() {\u000a            self.requestData();\u000a        };\u000a\u000a        self._resetScrollPosition = function() {\u000a            $('.scrollable', self.settingsDialog).scrollTop(0);\u000a        };\u000a\u000a        self.selectTab = function(tab) {\u000a            if (tab != undefined) {\u000a                if (!_.startsWith(tab, "#")) {\u000a                    tab = "#" + tab;\u000a                }\u000a                $('ul.nav-list a[href="' + tab + '"]', self.settingsDialog).tab("show");\u000a            } else {\u000a                $('ul.nav-list a:first', self.settingsDialog).tab("show");\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        SettingsViewModel,\u000a        ["loginStateViewModel", "usersViewModel", "printerProfilesViewModel", "aboutViewModel"],\u000a        ["#settings_dialog", "#navbar_settings"]\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.