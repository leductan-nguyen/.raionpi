V$(function() {\u000a    function TemperatureViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settingsViewModel = parameters[1];\u000a\u000a        self._createToolEntry = function() {\u000a            return {\u000a                name: ko.observable(),\u000a                key: ko.observable(),\u000a                actual: ko.observable(0),\u000a                target: ko.observable(0),\u000a                offset: ko.observable(0),\u000a                newTarget: ko.observable(),\u000a                newOffset: ko.observable()\u000a            }\u000a        };\u000a\u000a        self.tools = ko.observableArray([]);\u000a        self.hasBed = ko.observable(true);\u000a        self.bedTemp = self._createToolEntry();\u000a        self.bedTemp["name"](gettext("Bed"));\u000a        self.bedTemp["key"]("bed");\u000a\u000a        self.isErrorOrClosed = ko.observable(undefined);\u000a        self.isOperational = ko.observable(undefined);\u000a        self.isPrinting = ko.observable(undefined);\u000a        self.isPaused = ko.observable(undefined);\u000a        self.isError = ko.observable(undefined);\u000a        self.isReady = ko.observable(undefined);\u000a        self.isLoading = ko.observable(undefined);\u000a\u000a        self.temperature_profiles = self.settingsViewModel.temperature_profiles;\u000a        self.temperature_cutoff = self.settingsViewModel.temperature_cutoff;\u000a\u000a        self.heaterOptions = ko.observable({});\u000a\u000a        self._printerProfileUpdated = function() {\u000a            var graphColors = ["red", "orange", "green", "brown", "purple"];\u000a            var heaterOptions = {};\u000a            var tools = self.tools();\u000a\u000a            // tools\u000a            var numExtruders = self.settingsViewModel.printerProfiles.currentProfileData().extruder.count();\u000a            if (numExtruders && numExtruders > 1) {\u000a                // multiple extruders\u000a                for (var extruder = 0; extruder < numExtruders; extruder++) {\u000a                    var color = graphColors.shift();\u000a                    if (!color) color = "black";\u000a                    heaterOptions["tool" + extruder] = {name: "T" + extruder, color: color};\u000a\u000a                    if (tools.length <= extruder || !tools[extruder]) {\u000a                        tools[extruder] = self._createToolEntry();\u000a                    }\u000a                    tools[extruder]["name"](gettext("Tool") + " " + extruder);\u000a                    tools[extruder]["key"]("tool" + extruder);\u000a                }\u000a            } else {\u000a                // only one extruder, no need to add numbers\u000a                var color = graphColors[0];\u000a                heaterOptions["tool0"] = {name: "T", color: color};\u000a\u000a                if (tools.length < 1 || !tools[0]) {\u000a                    tools[0] = self._createToolEntry();\u000a                }\u000a                tools[0]["name"](gettext("Hotend"));\u000a                tools[0]["key"]("tool0");\u000a            }\u000a\u000a            // print bed\u000a            if (self.settingsViewModel.printerProfiles.currentProfileData().heatedBed()) {\u000a                self.hasBed(true);\u000a                heaterOptions["bed"] = {name: gettext("Bed"), color: "blue"};\u000a            } else {\u000a                self.hasBed(false);\u000a            }\u000a\u000a            // write back\u000a            self.heaterOptions(heaterOptions);\u000a            self.tools(tools);\u000a        };\u000a        self.settingsViewModel.printerProfiles.currentProfileData.subscribe(function() {\u000a            self._printerProfileUpdated();\u000a            self.settingsViewModel.printerProfiles.currentProfileData().extruder.count.subscribe(self._printerProfileUpdated);\u000a            self.settingsViewModel.printerProfiles.currentProfileData().heatedBed.subscribe(self._printerProfileUpdated());\u000a        });\u000a\u000a        self.temperatures = [];\u000a        self.plotOptions = {\u000a            yaxis: {\u000a                min: 0,\u000a                max: 310,\u000a                ticks: 10\u000a            },\u000a            xaxis: {\u000a                mode: "time",\u000a                minTickSize: [2, "minute"],\u000a                tickFormatter: function(val, axis) {\u000a                    if (val == undefined || val == 0)\u000a                        return ""; // we don't want to display the minutes since the epoch if not connected yet ;)\u000a\u000a                    // current time in milliseconds in UTC\u000a                    var timestampUtc = Date.now();\u000a\u000a                    // calculate difference in milliseconds\u000a                    var diff = timestampUtc - val;\u000a\u000a                    // convert to minutes\u000a                    var diffInMins = Math.round(diff / (60 * 1000));\u000a                    if (diffInMins == 0)\u000a                        return gettext("just now");\u000a                    else\u000a                        return "- " + diffInMins + " " + gettext("min");\u000a                }\u000a            },\u000a            legend: {\u000a                position: "sw",\u000a                noColumns: 2,\u000a                backgroundOpacity: 0\u000a            }\u000a        };\u000a\u000a        self.fromCurrentData = function(data) {\u000a            self._processStateData(data.state);\u000a            self._processTemperatureUpdateData(data.serverTime, data.temps);\u000a            self._processOffsetData(data.offsets);\u000a        };\u000a\u000a        self.fromHistoryData = function(data) {\u000a            self._processStateData(data.state);\u000a            self._processTemperatureHistoryData(data.serverTime, data.temps);\u000a            self._processOffsetData(data.offsets);\u000a        };\u000a\u000a        self._processStateData = function(data) {\u000a            self.isErrorOrClosed(data.flags.closedOrError);\u000a            self.isOperational(data.flags.operational);\u000a            self.isPaused(data.flags.paused);\u000a            self.isPrinting(data.flags.printing);\u000a            self.isError(data.flags.error);\u000a            self.isReady(data.flags.ready);\u000a            self.isLoading(data.flags.loading);\u000a        };\u000a\u000a        self._processTemperatureUpdateData = function(serverTime, data) {\u000a            if (data.length == 0)\u000a                return;\u000a\u000a            var lastData = data[data.length - 1];\u000a\u000a            var tools = self.tools();\u000a            for (var i = 0; i < tools.length; i++) {\u000a                if (lastData.hasOwnProperty("tool" + i)) {\u000a                    tools[i]["actual"](lastData["tool" + i].actual);\u000a                    tools[i]["target"](lastData["tool" + i].target);\u000a                }\u000a            }\u000a\u000a            if (lastData.hasOwnProperty("bed")) {\u000a                self.bedTemp["actual"](lastData.bed.actual);\u000a                self.bedTemp["target"](lastData.bed.target);\u000a            }\u000a\u000a            if (!CONFIG_TEMPERATURE_GRAPH) return;\u000a\u000a            self.temperatures = self._processTemperatureData(serverTime, data, self.temperatures);\u000a            self.updatePlot();\u000a        };\u000a\u000a        self._processTemperatureHistoryData = function(serverTime, data) {\u000a            self.temperatures = self._processTemperatureData(serverTime, data);\u000a            self.updatePlot();\u000a        };\u000a\u000a        self._processOffsetData = function(data) {\u000a            var tools = self.tools();\u000a            for (var i = 0; i < tools.length; i++) {\u000a                if (data.hasOwnProperty("tool" + i)) {\u000a                    tools[i]["offset"](data["tool" + i]);\u000a                }\u000a            }\u000a\u000a            if (data.hasOwnProperty("bed")) {\u000a                self.bedTemp["offset"](data["bed"]);\u000a            }\u000a        };\u000a\u000a        self._processTemperatureData = function(serverTime, data, result) {\u000a            var types = _.keys(self.heaterOptions());\u000a            var clientTime = Date.now();\u000a\u000a            // make sure result is properly initialized\u000a            if (!result) {\u000a                result = {};\u000a            }\u000a\u000a            _.each(types, function(type) {\u000a                if (!result.hasOwnProperty(type)) {\u000a                    result[type] = {actual: [], target: []};\u000a                }\u000a                if (!result[type].hasOwnProperty("actual")) result[type]["actual"] = [];\u000a                if (!result[type].hasOwnProperty("target")) result[type]["target"] = [];\u000a            });\u000a\u000a            // convert data\u000a            _.each(data, function(d) {\u000a                var timeDiff = (serverTime - d.time) * 1000;\u000a                var time = clientTime - timeDiff;\u000a                _.each(types, function(type) {\u000a                    if (!d[type]) return;\u000a                    result[type].actual.push([time, d[type].actual]);\u000a                    result[type].target.push([time, d[type].target]);\u000a                })\u000a            });\u000a\u000a            var filterOld = function(item) {\u000a                return item[0] >= clientTime - self.temperature_cutoff() * 60 * 1000;\u000a            };\u000a\u000a            _.each(_.keys(self.heaterOptions()), function(d) {\u000a                result[d].actual = _.filter(result[d].actual, filterOld);\u000a                result[d].target = _.filter(result[d].target, filterOld);\u000a            });\u000a\u000a            return result;\u000a        };\u000a\u000a        self.updatePlot = function() {\u000a            var graph = $("#temperature-graph");\u000a            if (graph.length) {\u000a                var data = [];\u000a                var heaterOptions = self.heaterOptions();\u000a                if (!heaterOptions) return;\u000a\u000a                _.each(_.keys(heaterOptions), function(type) {\u000a                    if (type == "bed" && !self.hasBed()) {\u000a                        return;\u000a                    }\u000a\u000a                    var actuals = [];\u000a                    var targets = [];\u000a\u000a                    if (self.temperatures[type]) {\u000a                        actuals = self.temperatures[type].actual;\u000a                        targets = self.temperatures[type].target;\u000a                    }\u000a\u000a                    var actualTemp = actuals && actuals.length ? formatTemperature(actuals[actuals.length - 1][1]) : "-";\u000a                    var targetTemp = targets && targets.length ? formatTemperature(targets[targets.length - 1][1]) : "-";\u000a\u000a                    data.push({\u000a                        label: gettext("Actual") + " " + heaterOptions[type].name + ": " + actualTemp,\u000a                        color: heaterOptions[type].color,\u000a                        data: actuals\u000a                    });\u000a                    data.push({\u000a                        label: gettext("Target") + " " + heaterOptions[type].name + ": " + targetTemp,\u000a                        color: pusher.color(heaterOptions[type].color).tint(0.5).html(),\u000a                        data: targets\u000a                    });\u000a                });\u000a\u000a                $.plot(graph, data, self.plotOptions);\u000a            }\u000a        };\u000a\u000a        self.setTarget = function(item) {\u000a            var value = item.newTarget();\u000a            if (!value) return;\u000a\u000a            self._sendToolCommand("target",\u000a                item.key(),\u000a                item.newTarget(),\u000a                function() {item.newTarget("");}\u000a            );\u000a        };\u000a\u000a        self.setTargetFromProfile = function(item, profile) {\u000a            if (!profile) return;\u000a\u000a            var value = undefined;\u000a            if (item.key() == "bed") {\u000a                value = profile.bed;\u000a            } else {\u000a                value = profile.extruder;\u000a            }\u000a\u000a            self._sendToolCommand("target",\u000a                item.key(),\u000a                value,\u000a                function() {item.newTarget("");}\u000a            );\u000a        };\u000a\u000a        self.setTargetToZero = function(item) {\u000a            self._sendToolCommand("target",\u000a                item.key(),\u000a                0,\u000a                function() {item.newTarget("");}\u000a            );\u000a        };\u000a\u000a        self.setOffset = function(item) {\u000a            self._sendToolCommand("offset",\u000a                item.key(),\u000a                item.newOffset(),\u000a                function() {item.newOffset("");}\u000a            );\u000a        };\u000a\u000a        self._sendToolCommand = function(command, type, temp, successCb, errorCb) {\u000a            var data = {\u000a                command: command\u000a            };\u000a\u000a            var endpoint;\u000a            if (type == "bed") {\u000a                if ("target" == command) {\u000a                    data["target"] = parseInt(temp);\u000a                } else if ("offset" == command) {\u000a                    data["offset"] = parseInt(temp);\u000a                } else {\u000a                    return;\u000a                }\u000a\u000a                endpoint = "bed";\u000a            } else {\u000a                var group;\u000a                if ("target" == command) {\u000a                    group = "targets";\u000a                } else if ("offset" == command) {\u000a                    group = "offsets";\u000a                } else {\u000a                    return;\u000a                }\u000a                data[group] = {};\u000a                data[group][type] = parseInt(temp);\u000a\u000a                endpoint = "tool";\u000a            }\u000a\u000a            $.ajax({\u000a                url: API_BASEURL + "printer/" + endpoint,\u000a                type: "POST",\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                data: JSON.stringify(data),\u000a                success: function() { if (successCb !== undefined) successCb(); },\u000a                error: function() { if (errorCb !== undefined) errorCb(); }\u000a            });\u000a\u000a        };\u000a\u000a        self.handleEnter = function(event, type, item) {\u000a            if (event.keyCode == 13) {\u000a                if (type == "target") {\u000a                    self.setTarget(item);\u000a                } else if (type == "offset") {\u000a                    self.setOffset(item);\u000a                }\u000a            }\u000a        };\u000a\u000a        self.onAfterTabChange = function(current, previous) {\u000a            if (current != "#temp") {\u000a                return;\u000a            }\u000a            self.updatePlot();\u000a        }\u000a\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        TemperatureViewModel,\u000a        ["loginStateViewModel", "settingsViewModel"],\u000a        "#temp"\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.