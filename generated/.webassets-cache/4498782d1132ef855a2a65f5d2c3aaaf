V$(function() {\u000a    function SoftwareUpdateViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.printerState = parameters[1];\u000a        self.settings = parameters[2];\u000a        self.popup = undefined;\u000a\u000a        self.forceUpdate = false;\u000a\u000a        self.updateInProgress = false;\u000a        self.waitingForRestart = false;\u000a        self.restartTimeout = undefined;\u000a\u000a        self.currentlyBeingUpdated = [];\u000a\u000a        self.octoprintUnconfigured = ko.observable();\u000a        self.octoprintUnreleased = ko.observable();\u000a\u000a        self.config_cacheTtl = ko.observable();\u000a        self.config_checkoutFolder = ko.observable();\u000a        self.config_checkType = ko.observable();\u000a\u000a        self.configurationDialog = $("#settings_plugin_softwareupdate_configurationdialog");\u000a        self.confirmationDialog = $("#softwareupdate_confirmation_dialog");\u000a\u000a        self.config_availableCheckTypes = [\u000a            {"key": "github_release", "name": gettext("Release")},\u000a            {"key": "git_commit", "name": gettext("Commit")}\u000a        ];\u000a\u000a        self.reloadOverlay = $("#reloadui_overlay");\u000a\u000a        self.versions = new ItemListHelper(\u000a            "plugin.softwareupdate.versions",\u000a            {\u000a                "name": function(a, b) {\u000a                    // sorts ascending, puts octoprint first\u000a                    if (a.key.toLocaleLowerCase() == "octoprint") return -1;\u000a                    if (b.key.toLocaleLowerCase() == "octoprint") return 1;\u000a\u000a                    if (a.displayName.toLocaleLowerCase() < b.displayName.toLocaleLowerCase()) return -1;\u000a                    if (a.displayName.toLocaleLowerCase() > b.displayName.toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {},\u000a            "name",\u000a            [],\u000a            [],\u000a            5\u000a        );\u000a\u000a        self.availableAndPossible = ko.computed(function() {\u000a            return _.filter(self.versions.items(), function(info) { return info.updateAvailable && info.updatePossible; });\u000a        });\u000a\u000a        self.onUserLoggedIn = function() {\u000a            self.performCheck();\u000a        };\u000a\u000a        self._showPopup = function(options, eventListeners) {\u000a            self._closePopup();\u000a            self.popup = new PNotify(options);\u000a\u000a            if (eventListeners) {\u000a                var popupObj = self.popup.get();\u000a                _.each(eventListeners, function(value, key) {\u000a                    popupObj.on(key, value);\u000a                })\u000a            }\u000a        };\u000a\u000a        self._updatePopup = function(options) {\u000a            if (self.popup === undefined) {\u000a                self._showPopup(options);\u000a            } else {\u000a                self.popup.update(options);\u000a            }\u000a        };\u000a\u000a        self._closePopup = function() {\u000a            if (self.popup !== undefined) {\u000a                self.popup.remove();\u000a            }\u000a        };\u000a\u000a        self.showPluginSettings = function() {\u000a            self._copyConfig();\u000a            self.configurationDialog.modal();\u000a        };\u000a\u000a        self.savePluginSettings = function() {\u000a            var data = {\u000a                plugins: {\u000a                    softwareupdate: {\u000a                        cache_ttl: parseInt(self.config_cacheTtl()),\u000a                        octoprint_checkout_folder: self.config_checkoutFolder(),\u000a                        octoprint_type: self.config_checkType()\u000a                    }\u000a                }\u000a            };\u000a            self.settings.saveData(data, function() {\u000a                self.configurationDialog.modal("hide");\u000a                self._copyConfig();\u000a                self.performCheck();\u000a            });\u000a        };\u000a\u000a        self._copyConfig = function() {\u000a            self.config_cacheTtl(self.settings.settings.plugins.softwareupdate.cache_ttl());\u000a            self.config_checkoutFolder(self.settings.settings.plugins.softwareupdate.octoprint_checkout_folder());\u000a            self.config_checkType(self.settings.settings.plugins.softwareupdate.octoprint_type());\u000a        };\u000a\u000a        self.fromCheckResponse = function(data, ignoreSeen, showIfNothingNew) {\u000a            var versions = [];\u000a            _.each(data.information, function(value, key) {\u000a                value["key"] = key;\u000a\u000a                if (!value.hasOwnProperty("displayName") || value.displayName == "") {\u000a                    value.displayName = value.key;\u000a                }\u000a                if (!value.hasOwnProperty("displayVersion") || value.displayVersion == "") {\u000a                    value.displayVersion = value.information.local.name;\u000a                }\u000a                if (!value.hasOwnProperty("releaseNotes") || value.releaseNotes == "") {\u000a                    value.releaseNotes = undefined;\u000a                }\u000a\u000a                var fullNameTemplate = gettext("%(name)s: %(version)s");\u000a                value.fullNameLocal = _.sprintf(fullNameTemplate, {name: value.displayName, version: value.displayVersion});\u000a\u000a                var fullNameRemoteVars = {name: value.displayName, version: gettext("unknown")};\u000a                if (value.hasOwnProperty("information") && value.information.hasOwnProperty("remote") && value.information.remote.hasOwnProperty("name")) {\u000a                    fullNameRemoteVars.version = value.information.remote.name;\u000a                }\u000a                value.fullNameRemote = _.sprintf(fullNameTemplate, fullNameRemoteVars);\u000a\u000a                versions.push(value);\u000a            });\u000a            self.versions.updateItems(versions);\u000a\u000a            var octoprint = data.information["octoprint"];\u000a            if (octoprint && octoprint.hasOwnProperty("check")) {\u000a                var check = octoprint.check;\u000a                if (BRANCH != "master" && check["type"] == "github_release") {\u000a                    self.octoprintUnreleased(true);\u000a                } else {\u000a                    self.octoprintUnreleased(false);\u000a                }\u000a\u000a                var checkoutFolder = (check["checkout_folder"] || "").trim();\u000a                var updateFolder = (check["update_folder"] || "").trim();\u000a                var checkType = check["type"] || "";\u000a                if ((checkType == "github_release" || checkType == "git_commit") && checkoutFolder == "" && updateFolder == "") {\u000a                    self.octoprintUnconfigured(true);\u000a                } else {\u000a                    self.octoprintUnconfigured(false);\u000a                }\u000a            }\u000a\u000a            if (data.status == "updateAvailable" || data.status == "updatePossible") {\u000a                var text = "<div class='softwareupdate_notification'>" + gettext("There are updates available for the following components:");\u000a\u000a                text += "<ul class='icons-ul'>";\u000a                _.each(self.versions.items(), function(update_info) {\u000a                    if (update_info.updateAvailable) {\u000a                        text += "<li>"\u000a                            + "<i class='icon-li " + (update_info.updatePossible ? "icon-ok" : "icon-remove")+ "'></i>"\u000a                            + "<span class='name' title='" + update_info.fullNameRemote + "'>" + update_info.fullNameRemote + "</span>"\u000a                            + (update_info.releaseNotes ? "<a href=\u005c"" +  update_info.releaseNotes + "\u005c" target=\u005c"_blank\u005c">" + gettext("Release Notes") + "</a>" : "")\u000a                            + "</li>";\u000a                    }\u000a                });\u000a                text += "</ul>";\u000a\u000a                text += "<small>" + gettext("Those components marked with <i class=\u005c"icon-ok\u005c"></i> can be updated directly.") + "</small>";\u000a\u000a                text += "</div>";\u000a\u000a                var options = {\u000a                    title: gettext("Update Available"),\u000a                    text: text,\u000a                    hide: false\u000a                };\u000a                var eventListeners = {};\u000a\u000a                if (data.status == "updatePossible" && self.loginState.isAdmin()) {\u000a                    // if user is admin, add action buttons\u000a                    options["confirm"] = {\u000a                        confirm: true,\u000a                        buttons: [{\u000a                            text: gettext("Ignore"),\u000a                            click: function() {\u000a                                self._markNotificationAsSeen(data.information);\u000a                                self._showPopup({\u000a                                    text: gettext("You can make this message display again via \u005c"Settings\u005c" > \u005c"Software Update\u005c" > \u005c"Check for update now\u005c"")\u000a                                });\u000a                            }\u000a                        }, {\u000a                            text: gettext("Update now"),\u000a                            addClass: "btn-primary",\u000a                            click: self.update\u000a                        }]\u000a                    };\u000a                    options["buttons"] = {\u000a                        closer: false,\u000a                        sticker: false\u000a                    };\u000a                }\u000a\u000a                if (ignoreSeen || !self._hasNotificationBeenSeen(data.information)) {\u000a                    self._showPopup(options, eventListeners);\u000a                }\u000a            } else if (data.status == "current") {\u000a                if (showIfNothingNew) {\u000a                    self._showPopup({\u000a                        title: gettext("Everything is up-to-date"),\u000a                        hide: false,\u000a                        type: "success"\u000a                    });\u000a                } else {\u000a                    self._closePopup();\u000a                }\u000a            }\u000a        };\u000a\u000a        self.performCheck = function(showIfNothingNew, force, ignoreSeen) {\u000a            if (!self.loginState.isUser()) return;\u000a\u000a            var url = PLUGIN_BASEURL + "softwareupdate/check";\u000a            if (force) {\u000a                url += "?force=true";\u000a            }\u000a\u000a            $.ajax({\u000a                url: url,\u000a                type: "GET",\u000a                dataType: "json",\u000a                success: function(data) {\u000a                    self.fromCheckResponse(data, ignoreSeen, showIfNothingNew);\u000a                }\u000a            });\u000a        };\u000a\u000a        self._markNotificationAsSeen = function(data) {\u000a            if (!Modernizr.localstorage)\u000a                return false;\u000a            localStorage["plugin.softwareupdate.seen_information"] = JSON.stringify(self._informationToRemoteVersions(data));\u000a        };\u000a\u000a        self._hasNotificationBeenSeen = function(data) {\u000a            if (!Modernizr.localstorage)\u000a                return false;\u000a\u000a            if (localStorage["plugin.softwareupdate.seen_information"] == undefined)\u000a                return false;\u000a\u000a            var knownData = JSON.parse(localStorage["plugin.softwareupdate.seen_information"]);\u000a            var freshData = self._informationToRemoteVersions(data);\u000a\u000a            var hasBeenSeen = true;\u000a            _.each(freshData, function(value, key) {\u000a                if (!_.has(knownData, key) || knownData[key] != freshData[key]) {\u000a                    hasBeenSeen = false;\u000a                }\u000a            });\u000a            return hasBeenSeen;\u000a        };\u000a\u000a        self._informationToRemoteVersions = function(data) {\u000a            var result = {};\u000a            _.each(data, function(value, key) {\u000a                result[key] = value.information.remote.value;\u000a            });\u000a            return result;\u000a        };\u000a\u000a        self.performUpdate = function(force, items) {\u000a            self.updateInProgress = true;\u000a\u000a            var options = {\u000a                title: gettext("Updating..."),\u000a                text: gettext("Now updating, please wait."),\u000a                icon: "icon-cog icon-spin",\u000a                hide: false,\u000a                buttons: {\u000a                    closer: false,\u000a                    sticker: false\u000a                }\u000a            };\u000a            self._showPopup(options);\u000a\u000a            var postData = {\u000a                force: (force == true)\u000a            };\u000a            if (items != undefined) {\u000a                postData.check = items;\u000a            }\u000a\u000a            $.ajax({\u000a                url: PLUGIN_BASEURL + "softwareupdate/update",\u000a                type: "POST",\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                data: JSON.stringify(postData),\u000a                error: function() {\u000a                    self.updateInProgress = false;\u000a                    self._showPopup({\u000a                        title: gettext("Update not started!"),\u000a                        text: gettext("The update could not be started. Is it already active? Please consult the log for details."),\u000a                        type: "error",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    });\u000a                },\u000a                success: function(data) {\u000a                    self.currentlyBeingUpdated = data.checks;\u000a                }\u000a            });\u000a        };\u000a\u000a        self.update = function(force) {\u000a            if (self.updateInProgress) return;\u000a            if (!self.loginState.isAdmin()) return;\u000a\u000a            if (self.printerState.isPrinting()) {\u000a                self._showPopup({\u000a                    title: gettext("Can't update while printing"),\u000a                    text: gettext("A print job is currently in progress. Updating will be prevented until it is done."),\u000a                    type: "error"\u000a                });\u000a            } else {\u000a                self.forceUpdate = (force == true);\u000a                self.confirmationDialog.modal("show");\u000a            }\u000a\u000a        };\u000a\u000a        self.confirmUpdate = function() {\u000a            self.confirmationDialog.hide();\u000a            self.performUpdate(self.forceUpdate,\u000a                               _.map(self.availableAndPossible(), function(info) { return info.key }));\u000a        };\u000a\u000a        self.onServerDisconnect = function() {\u000a            if (self.restartTimeout !== undefined) {\u000a                clearTimeout(self.restartTimeout);\u000a            }\u000a            return true;\u000a        };\u000a\u000a        self.onDataUpdaterReconnect = function() {\u000a            if (self.waitingForRestart) {\u000a                self.waitingForRestart = false;\u000a                self.updateInProgress = false;\u000a                if (!self.reloadOverlay.is(":visible")) {\u000a                    self.reloadOverlay.show();\u000a                }\u000a            }\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function(plugin, data) {\u000a            if (plugin != "softwareupdate") {\u000a                return;\u000a            }\u000a\u000a            var messageType = data.type;\u000a            var messageData = data.data;\u000a\u000a            var options = undefined;\u000a\u000a            switch (messageType) {\u000a                case "updating": {\u000a                    console.log(JSON.stringify(messageData));\u000a\u000a                    var name = self.currentlyBeingUpdated[messageData.target];\u000a                    if (name == undefined) {\u000a                        name = messageData.target;\u000a                    }\u000a\u000a                    self._updatePopup({\u000a                        text: _.sprintf(gettext("Now updating %(name)s to %(version)s"), {name: name, version: messageData.version})\u000a                    });\u000a                    break;\u000a                }\u000a                case "restarting": {\u000a                    console.log(JSON.stringify(messageData));\u000a\u000a                    options = {\u000a                        title: gettext("Update successful, restarting!"),\u000a                        text: gettext("The update finished successfully and the server will now be restarted."),\u000a                        type: "success",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    };\u000a\u000a                    self.waitingForRestart = true;\u000a                    self.restartTimeout = setTimeout(function() {\u000a                        self._showPopup({\u000a                            title: gettext("Restart failed"),\u000a                            text: gettext("The server apparently did not restart by itself, you'll have to do it manually. Please consult the log file on what went wrong."),\u000a                            type: "error",\u000a                            hide: false,\u000a                            buttons: {\u000a                                sticker: false\u000a                            }\u000a                        });\u000a                        self.waitingForRestart = false;\u000a                    }, 60000);\u000a\u000a                    break;\u000a                }\u000a                case "restart_manually": {\u000a                    console.log(JSON.stringify(messageData));\u000a\u000a                    var restartType = messageData.restart_type;\u000a                    var text = gettext("The update finished successfully, please restart 3DRaion now.");\u000a                    if (restartType == "environment") {\u000a                        text = gettext("The update finished successfully, please reboot the server now.");\u000a                    }\u000a\u000a                    options = {\u000a                        title: gettext("Update successful, restart required!"),\u000a                        text: text,\u000a                        type: "success",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    };\u000a                    self.updateInProgress = false;\u000a                    break;\u000a                }\u000a                case "restart_failed": {\u000a                    var restartType = messageData.restart_type;\u000a                    var text = gettext("Restarting 3DRaion failed, please restart it manually. You might also want to consult the log file on what went wrong here.");\u000a                    if (restartType == "environment") {\u000a                        text = gettext("Rebooting the server failed, please reboot it manually. You might also want to consult the log file on what went wrong here.");\u000a                    }\u000a\u000a                    options = {\u000a                        title: gettext("Restart failed"),\u000a                        test: gettext("The server apparently did not restart by itself, you'll have to do it manually. Please consult the log file on what went wrong."),\u000a                        type: "error",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    };\u000a                    self.waitingForRestart = false;\u000a                    self.updateInProgress = false;\u000a                    break;\u000a                }\u000a                case "success": {\u000a                    options = {\u000a                        title: gettext("Update successful!"),\u000a                        text: gettext("The update finished successfully."),\u000a                        type: "success",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    };\u000a                    self.updateInProgress = false;\u000a                    break;\u000a                }\u000a                case "error": {\u000a                    self._showPopup({\u000a                        title: gettext("Update failed!"),\u000a                        text: gettext("The update did not finish successfully. Please consult the log for details."),\u000a                        type: "error",\u000a                        hide: false,\u000a                        buttons: {\u000a                            sticker: false\u000a                        }\u000a                    });\u000a                    self.updateInProgress = false;\u000a                    break;\u000a                }\u000a                case "update_versions": {\u000a                    self.performCheck();\u000a                    break;\u000a                }\u000a            }\u000a\u000a            if (options != undefined) {\u000a                self._showPopup(options);\u000a            }\u000a        };\u000a\u000a    }\u000a\u000a    // view model class, parameters for constructor, container to bind to\u000a    ADDITIONAL_VIEWMODELS.push([\u000a        SoftwareUpdateViewModel,\u000a        ["loginStateViewModel", "printerStateViewModel", "settingsViewModel"],\u000a        ["#settings_plugin_softwareupdate", "#softwareupdate_confirmation_dialog"]\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.