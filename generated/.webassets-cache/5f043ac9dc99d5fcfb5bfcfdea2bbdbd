V$(function() {\u000a    function PluginManagerViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.settingsViewModel = parameters[1];\u000a        self.printerState = parameters[2];\u000a\u000a        self.config_repositoryUrl = ko.observable();\u000a        self.config_repositoryTtl = ko.observable();\u000a        self.config_pipCommand = ko.observable();\u000a        self.config_pipAdditionalArgs = ko.observable();\u000a\u000a        self.configurationDialog = $("#settings_plugin_pluginmanager_configurationdialog");\u000a\u000a        self.plugins = new ItemListHelper(\u000a            "plugin.pluginmanager.installedplugins",\u000a            {\u000a                "name": function (a, b) {\u000a                    // sorts ascending\u000a                    if (a["name"].toLocaleLowerCase() < b["name"].toLocaleLowerCase()) return -1;\u000a                    if (a["name"].toLocaleLowerCase() > b["name"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a            },\u000a            "name",\u000a            [],\u000a            [],\u000a            5\u000a        );\u000a\u000a        self.repositoryplugins = new ItemListHelper(\u000a            "plugin.pluginmanager.repositoryplugins",\u000a            {\u000a                "title": function (a, b) {\u000a                    // sorts ascending\u000a                    if (a["title"].toLocaleLowerCase() < b["title"].toLocaleLowerCase()) return -1;\u000a                    if (a["title"].toLocaleLowerCase() > b["title"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                },\u000a                "published": function (a, b) {\u000a                    // sorts descending\u000a                    if (a["published"].toLocaleLowerCase() > b["published"].toLocaleLowerCase()) return -1;\u000a                    if (a["published"].toLocaleLowerCase() < b["published"].toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a                "filter_installed": function(plugin) {\u000a                    return !self.installed(plugin);\u000a                },\u000a                "filter_incompatible": function(plugin) {\u000a                    return plugin.is_compatible.octoprint && plugin.is_compatible.os;\u000a                }\u000a            },\u000a            "title",\u000a            ["filter_installed", "filter_incompatible"],\u000a            [],\u000a            0\u000a        );\u000a\u000a        self.uploadElement = $("#settings_plugin_pluginmanager_repositorydialog_upload");\u000a        self.uploadButton = $("#settings_plugin_pluginmanager_repositorydialog_upload_start");\u000a\u000a        self.repositoryAvailable = ko.observable(false);\u000a\u000a        self.repositorySearchQuery = ko.observable();\u000a        self.repositorySearchQuery.subscribe(function() {\u000a            self.performRepositorySearch();\u000a        });\u000a\u000a        self.installUrl = ko.observable();\u000a        self.uploadFilename = ko.observable();\u000a\u000a        self.loglines = ko.observableArray([]);\u000a        self.installedPlugins = ko.observableArray([]);\u000a\u000a        self.followDependencyLinks = ko.observable(false);\u000a\u000a        self.pipAvailable = ko.observable(false);\u000a        self.pipCommand = ko.observable();\u000a        self.pipVersion = ko.observable();\u000a        self.pipUseSudo = ko.observable();\u000a        self.pipAdditionalArgs = ko.observable();\u000a\u000a        self.working = ko.observable(false);\u000a        self.workingTitle = ko.observable();\u000a        self.workingDialog = undefined;\u000a        self.workingOutput = undefined;\u000a\u000a        self.enableManagement = ko.pureComputed(function() {\u000a            return !self.printerState.isPrinting();\u000a        });\u000a\u000a        self.enableToggle = function(data) {\u000a            return self.enableManagement() && data.key != 'pluginmanager';\u000a        };\u000a\u000a        self.enableUninstall = function(data) {\u000a            return self.enableManagement()\u000a                && (data.origin != "entry_point" || self.pipAvailable())\u000a                && !data.bundled\u000a                && data.key != 'pluginmanager'\u000a                && !data.pending_uninstall;\u000a        };\u000a\u000a        self.enableRepoInstall = function(data) {\u000a            return self.enableManagement() && self.pipAvailable() && self.isCompatible(data);\u000a        };\u000a\u000a        self.invalidUrl = ko.pureComputed(function() {\u000a            var url = self.installUrl();\u000a            return url !== undefined && url.trim() != "" && !(_.startsWith(url.toLocaleLowerCase(), "http://") || _.startsWith(url.toLocaleLowerCase(), "https://"));\u000a        });\u000a\u000a        self.enableUrlInstall = ko.pureComputed(function() {\u000a            var url = self.installUrl();\u000a            return self.enableManagement() && self.pipAvailable() && url !== undefined && url.trim() != "" && !self.invalidUrl();\u000a        });\u000a\u000a        self.invalidArchive = ko.pureComputed(function() {\u000a            var name = self.uploadFilename();\u000a            return name !== undefined && !(_.endsWith(name.toLocaleLowerCase(), ".zip") || _.endsWith(name.toLocaleLowerCase(), ".tar.gz") || _.endsWith(name.toLocaleLowerCase(), ".tgz") || _.endsWith(name.toLocaleLowerCase(), ".tar"));\u000a        });\u000a\u000a        self.enableArchiveInstall = ko.pureComputed(function() {\u000a            var name = self.uploadFilename();\u000a            return self.enableManagement() && self.pipAvailable() && name !== undefined && name.trim() != "" && !self.invalidArchive();\u000a        });\u000a\u000a        self.uploadElement.fileupload({\u000a            dataType: "json",\u000a            maxNumberOfFiles: 1,\u000a            autoUpload: false,\u000a            add: function(e, data) {\u000a                if (data.files.length == 0) {\u000a                    return false;\u000a                }\u000a\u000a                self.uploadFilename(data.files[0].name);\u000a\u000a                self.uploadButton.unbind("click");\u000a                self.uploadButton.bind("click", function() {\u000a                    self._markWorking(gettext("Installing plugin..."), gettext("Installing plugin from uploaded archive..."));\u000a                    data.formData = {\u000a                        dependency_links: self.followDependencyLinks()\u000a                    };\u000a                    data.submit();\u000a                    return false;\u000a                });\u000a            },\u000a            done: function(e, data) {\u000a                self._markDone();\u000a                self.uploadButton.unbind("click");\u000a                self.uploadFilename("");\u000a            },\u000a            fail: function(e, data) {\u000a                new PNotify({\u000a                    title: gettext("Something went wrong"),\u000a                    text: gettext("Please consult octoprint.log for details"),\u000a                    type: "error",\u000a                    hide: false\u000a                });\u000a                self._markDone();\u000a                self.uploadButton.unbind("click");\u000a                self.uploadFilename("");\u000a            }\u000a        });\u000a\u000a        self.performRepositorySearch = function() {\u000a            var query = self.repositorySearchQuery();\u000a            if (query !== undefined && query.trim() != "") {\u000a                query = query.toLocaleLowerCase();\u000a                self.repositoryplugins.changeSearchFunction(function(entry) {\u000a                    return entry && (entry["title"].toLocaleLowerCase().indexOf(query) > -1 || entry["description"].toLocaleLowerCase().indexOf(query) > -1);\u000a                });\u000a            } else {\u000a                self.repositoryplugins.resetSearch();\u000a            }\u000a            return false;\u000a        };\u000a\u000a        self.fromResponse = function(data) {\u000a            self._fromPluginsResponse(data.plugins);\u000a            self._fromRepositoryResponse(data.repository);\u000a            self._fromPipResponse(data.pip);\u000a        };\u000a\u000a        self._fromPluginsResponse = function(data) {\u000a            var installedPlugins = [];\u000a            _.each(data, function(plugin) {\u000a                installedPlugins.push(plugin.key);\u000a            });\u000a            self.installedPlugins(installedPlugins);\u000a            self.plugins.updateItems(data);\u000a        };\u000a\u000a        self._fromRepositoryResponse = function(data) {\u000a            self.repositoryAvailable(data.available);\u000a            if (data.available) {\u000a                self.repositoryplugins.updateItems(data.plugins);\u000a            } else {\u000a                self.repositoryplugins.updateItems([]);\u000a            }\u000a        };\u000a\u000a        self._fromPipResponse = function(data) {\u000a            self.pipAvailable(data.available);\u000a            if (data.available) {\u000a                self.pipCommand(data.command);\u000a                self.pipVersion(data.version);\u000a                self.pipUseSudo(data.use_sudo);\u000a                self.pipAdditionalArgs(data.additional_args);\u000a            } else {\u000a                self.pipCommand(undefined);\u000a                self.pipVersion(undefined);\u000a                self.pipUseSudo(undefined);\u000a                self.pipAdditionalArgs(undefined);\u000a            }\u000a        };\u000a\u000a        self.requestData = function(includeRepo) {\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            $.ajax({\u000a                url: API_BASEURL + "plugin/pluginmanager" + ((includeRepo) ? "?refresh_repository=true" : ""),\u000a                type: "GET",\u000a                dataType: "json",\u000a                success: self.fromResponse\u000a            });\u000a        };\u000a\u000a        self.togglePlugin = function(data) {\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            if (!self.enableManagement()) {\u000a                return;\u000a            }\u000a\u000a            if (data.key == "pluginmanager") return;\u000a\u000a            var command = self._getToggleCommand(data);\u000a\u000a            var payload = {plugin: data.key};\u000a            self._postCommand(command, payload, function(response) {\u000a                self.requestData();\u000a            }, function() {\u000a                new PNotify({\u000a                    title: gettext("Something went wrong"),\u000a                    text: gettext("Please consult octoprint.log for details"),\u000a                    type: "error",\u000a                    hide: false\u000a                })\u000a            });\u000a        };\u000a\u000a        self.showRepository = function() {\u000a            self.repositoryDialog.modal("show");\u000a        };\u000a\u000a        self.pluginDetails = function(data) {\u000a            window.open(data.page);\u000a        };\u000a\u000a        self.installFromRepository = function(data) {\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            if (!self.enableManagement()) {\u000a                return;\u000a            }\u000a\u000a            if (self.installed(data)) {\u000a                self.installPlugin(data.archive, data.title, data.id, data.follow_dependency_links || self.followDependencyLinks());\u000a            } else {\u000a                self.installPlugin(data.archive, data.title, undefined, data.follow_dependency_links || self.followDependencyLinks());\u000a            }\u000a        };\u000a\u000a        self.installPlugin = function(url, name, reinstall, followDependencyLinks) {\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            if (!self.enableManagement()) {\u000a                return;\u000a            }\u000a\u000a            if (url === undefined) {\u000a                url = self.installUrl();\u000a            }\u000a            if (!url) return;\u000a\u000a            if (followDependencyLinks === undefined) {\u000a                followDependencyLinks = self.followDependencyLinks();\u000a            }\u000a\u000a            var workTitle, workText;\u000a            if (!reinstall) {\u000a                workTitle = gettext("Installing plugin...");\u000a                if (name) {\u000a                    workText = _.sprintf(gettext("Installing plugin \u005c"%(name)s\u005c" from %(url)s..."), {url: url, name: name});\u000a                } else {\u000a                    workText = _.sprintf(gettext("Installing plugin from %(url)s..."), {url: url});\u000a                }\u000a            } else {\u000a                workTitle = gettext("Reinstalling plugin...");\u000a                workText = _.sprintf(gettext("Reinstalling plugin \u005c"%(name)s\u005c" from %(url)s..."), {url: url, name: name});\u000a            }\u000a            self._markWorking(workTitle, workText);\u000a\u000a            var command = "install";\u000a            var payload = {url: url, dependency_links: followDependencyLinks};\u000a            if (reinstall) {\u000a                payload["plugin"] = reinstall;\u000a                payload["force"] = true;\u000a            }\u000a\u000a            self._postCommand(command, payload, function(response) {\u000a                self.requestData();\u000a                self._markDone();\u000a                self.installUrl("");\u000a            }, function() {\u000a                new PNotify({\u000a                    title: gettext("Something went wrong"),\u000a                    text: gettext("Please consult octoprint.log for details"),\u000a                    type: "error",\u000a                    hide: false\u000a                });\u000a                self._markDone();\u000a            });\u000a        };\u000a\u000a        self.uninstallPlugin = function(data) {\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            if (!self.enableManagement()) {\u000a                return;\u000a            }\u000a\u000a            if (data.bundled) return;\u000a            if (data.key == "pluginmanager") return;\u000a\u000a            self._markWorking(gettext("Uninstalling plugin..."), _.sprintf(gettext("Uninstalling plugin \u005c"%(name)s\u005c""), {name: data.name}));\u000a\u000a            var command = "uninstall";\u000a            var payload = {plugin: data.key};\u000a            self._postCommand(command, payload, function(response) {\u000a                self.requestData();\u000a                self._markDone();\u000a            }, function() {\u000a                new PNotify({\u000a                    title: gettext("Something went wrong"),\u000a                    text: gettext("Please consult octoprint.log for details"),\u000a                    type: "error",\u000a                    hide: false\u000a                });\u000a                self._markDone();\u000a            });\u000a        };\u000a\u000a        self.refreshRepository = function() {\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            self.requestData(true);\u000a        };\u000a\u000a        self.showPluginSettings = function() {\u000a            self._copyConfig();\u000a            self.configurationDialog.modal();\u000a        };\u000a\u000a        self.savePluginSettings = function() {\u000a            var pipCommand = self.config_pipCommand();\u000a            if (pipCommand != undefined && pipCommand.trim() == "") {\u000a                pipCommand = null;\u000a            }\u000a\u000a            var repository = self.config_repositoryUrl();\u000a            if (repository != undefined && repository.trim() == "") {\u000a                repository = null;\u000a            }\u000a\u000a            var repositoryTtl;\u000a            try {\u000a                repositoryTtl = parseInt(self.config_repositoryTtl());\u000a            } catch (ex) {\u000a                repositoryTtl = null;\u000a            }\u000a\u000a            var pipArgs = self.config_pipAdditionalArgs();\u000a            if (pipArgs != undefined && pipArgs.trim() == "") {\u000a                pipArgs = null;\u000a            }\u000a\u000a            var data = {\u000a                plugins: {\u000a                    pluginmanager: {\u000a                        repository: repository,\u000a                        repository_ttl: repositoryTtl,\u000a                        pip: pipCommand,\u000a                        pip_args: pipArgs\u000a                    }\u000a                }\u000a            };\u000a            self.settingsViewModel.saveData(data, function() {\u000a                self.configurationDialog.modal("hide");\u000a                self._copyConfig();\u000a                self.refreshRepository();\u000a            });\u000a        };\u000a\u000a        self._copyConfig = function() {\u000a            self.config_repositoryUrl(self.settingsViewModel.settings.plugins.pluginmanager.repository());\u000a            self.config_repositoryTtl(self.settingsViewModel.settings.plugins.pluginmanager.repository_ttl());\u000a            self.config_pipCommand(self.settingsViewModel.settings.plugins.pluginmanager.pip());\u000a            self.config_pipAdditionalArgs(self.settingsViewModel.settings.plugins.pluginmanager.pip_args());\u000a        };\u000a\u000a        self.installed = function(data) {\u000a            return _.includes(self.installedPlugins(), data.id);\u000a        };\u000a\u000a        self.isCompatible = function(data) {\u000a            return data.is_compatible.octoprint && data.is_compatible.os;\u000a        };\u000a\u000a        self.installButtonText = function(data) {\u000a            return self.isCompatible(data) ? (self.installed(data) ? gettext("Reinstall") : gettext("Install")) : gettext("Incompatible");\u000a        };\u000a\u000a        self._displayNotification = function(response, titleSuccess, textSuccess, textRestart, textReload, titleError, textError) {\u000a            if (response.result) {\u000a                if (response.needs_restart) {\u000a                    new PNotify({\u000a                        title: titleSuccess,\u000a                        text: textRestart,\u000a                        hide: false\u000a                    });\u000a                } else if (response.needs_refresh) {\u000a                    new PNotify({\u000a                        title: titleSuccess,\u000a                        text: textReload,\u000a                        confirm: {\u000a                            confirm: true,\u000a                            buttons: [{\u000a                                text: gettext("Reload now"),\u000a                                click: function () {\u000a                                    location.reload(true);\u000a                                }\u000a                            }]\u000a                        },\u000a                        buttons: {\u000a                            closer: false,\u000a                            sticker: false\u000a                        },\u000a                        hide: false\u000a                    })\u000a                } else {\u000a                    new PNotify({\u000a                        title: titleSuccess,\u000a                        text: textSuccess,\u000a                        type: "success",\u000a                        hide: false\u000a                    })\u000a                }\u000a            } else {\u000a                new PNotify({\u000a                    title: titleError,\u000a                    text: textError,\u000a                    type: "error",\u000a                    hide: false\u000a                });\u000a            }\u000a        };\u000a\u000a        self._postCommand = function (command, data, successCallback, failureCallback, alwaysCallback, timeout) {\u000a            var payload = _.extend(data, {command: command});\u000a\u000a            var params = {\u000a                url: API_BASEURL + "plugin/pluginmanager",\u000a                type: "POST",\u000a                dataType: "json",\u000a                data: JSON.stringify(payload),\u000a                contentType: "application/json; charset=UTF-8",\u000a                success: function(response) {\u000a                    if (successCallback) successCallback(response);\u000a                },\u000a                error: function() {\u000a                    if (failureCallback) failureCallback();\u000a                },\u000a                complete: function() {\u000a                    if (alwaysCallback) alwaysCallback();\u000a                }\u000a            };\u000a\u000a            if (timeout != undefined) {\u000a                params.timeout = timeout;\u000a            }\u000a\u000a            $.ajax(params);\u000a        };\u000a\u000a        self._markWorking = function(title, line) {\u000a            self.working(true);\u000a            self.workingTitle(title);\u000a\u000a            self.loglines.removeAll();\u000a            self.loglines.push({line: line, stream: "message"});\u000a\u000a            self.workingDialog.modal("show");\u000a        };\u000a\u000a        self._markDone = function() {\u000a            self.working(false);\u000a            self.loglines.push({line: gettext("Done!"), stream: "message"});\u000a            self._scrollWorkingOutputToEnd();\u000a        };\u000a\u000a        self._scrollWorkingOutputToEnd = function() {\u000a            self.workingOutput.scrollTop(self.workingOutput[0].scrollHeight - self.workingOutput.height());\u000a        };\u000a\u000a        self._getToggleCommand = function(data) {\u000a            return ((!data.enabled || data.pending_disable) && !data.pending_enable) ? "enable" : "disable";\u000a        };\u000a\u000a        self.toggleButtonCss = function(data) {\u000a            var icon = self._getToggleCommand(data) == "enable" ? "icon-circle-blank" : "icon-circle";\u000a            var disabled = (self.enableToggle(data)) ? "" : " disabled";\u000a\u000a            return icon + disabled;\u000a        };\u000a\u000a        self.toggleButtonTitle = function(data) {\u000a            return self._getToggleCommand(data) == "enable" ? gettext("Enable Plugin") : gettext("Disable Plugin");\u000a        };\u000a\u000a        self.onBeforeBinding = function() {\u000a            self.settings = self.settingsViewModel.settings;\u000a        };\u000a\u000a        self.onUserLoggedIn = function(user) {\u000a            if (user.admin) {\u000a                self.requestData();\u000a            }\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            self.workingDialog = $("#settings_plugin_pluginmanager_workingdialog");\u000a            self.workingOutput = $("#settings_plugin_pluginmanager_workingdialog_output");\u000a            self.repositoryDialog = $("#settings_plugin_pluginmanager_repositorydialog");\u000a\u000a            $("#settings_plugin_pluginmanager_repositorydialog_list").slimScroll({\u000a                height: "306px",\u000a                size: "5px",\u000a                distance: "0",\u000a                railVisible: true,\u000a                alwaysVisible: true,\u000a                scrollBy: "102px"\u000a            });\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function(plugin, data) {\u000a            if (plugin != "pluginmanager") {\u000a                return;\u000a            }\u000a\u000a            if (!self.loginState.isAdmin()) {\u000a                return;\u000a            }\u000a\u000a            if (!data.hasOwnProperty("type")) {\u000a                return;\u000a            }\u000a\u000a            var messageType = data.type;\u000a\u000a            if (messageType == "loglines" && self.working()) {\u000a                _.each(data.loglines, function(line) {\u000a                    self.loglines.push(line);\u000a                });\u000a                self._scrollWorkingOutputToEnd();\u000a            } else if (messageType == "result") {\u000a                var titleSuccess, textSuccess, textRestart, textReload, titleError, textError;\u000a                var action = data.action;\u000a\u000a                var name = "Unknown";\u000a                if (action == "install") {\u000a                    var unknown = false;\u000a\u000a                    if (data.hasOwnProperty("plugin")) {\u000a                        if (data.plugin == "unknown") {\u000a                            unknown = true;\u000a                        } else {\u000a                            name = data.plugin.name;\u000a                        }\u000a                    }\u000a\u000a                    if (unknown) {\u000a                        titleSuccess = _.sprintf(gettext("Plugin installed"));\u000a                        textSuccess = gettext("A plugin was installed successfully, however it was impossible to detect which one. Please Restart 3DRaion to make sure everything will be registered properly");\u000a                        textRestart = textSuccess;\u000a                        textReload = textSuccess;\u000a                    } else if (data.was_reinstalled) {\u000a                        titleSuccess = _.sprintf(gettext("Plugin \u005c"%(name)s\u005c" reinstalled"), {name: name});\u000a                        textSuccess = gettext("The plugin was reinstalled successfully");\u000a                        textRestart = gettext("The plugin was reinstalled successfully, however a restart of 3DRaion is needed for that to take effect.");\u000a                        textReload = gettext("The plugin was reinstalled successfully, however a reload of the page is needed for that to take effect.");\u000a                    } else {\u000a                        titleSuccess = _.sprintf(gettext("Plugin \u005c"%(name)s\u005c" installed"), {name: name});\u000a                        textSuccess = gettext("The plugin was installed successfully");\u000a                        textRestart = gettext("The plugin was installed successfully, however a restart of 3DRaion is needed for that to take effect.");\u000a                        textReload = gettext("The plugin was installed successfully, however a reload of the page is needed for that to take effect.");\u000a                    }\u000a\u000a                    titleError = gettext("Something went wrong");\u000a                    var url = "unknown";\u000a                    if (data.hasOwnProperty("url")) {\u000a                        url = data.url;\u000a                    }\u000a\u000a                    if (data.hasOwnProperty("reason")) {\u000a                        if (data.was_reinstalled) {\u000a                            textError = _.sprintf(gettext("Reinstalling the plugin from URL \u005c"%(url)s\u005c" failed: %(reason)s"), {reason: data.reason, url: url});\u000a                        } else {\u000a                            textError = _.sprintf(gettext("Installing the plugin from URL \u005c"%(url)s\u005c" failed: %(reason)s"), {reason: data.reason, url: url});\u000a                        }\u000a                    } else {\u000a                        if (data.was_reinstalled) {\u000a                            textError = _.sprintf(gettext("Reinstalling the plugin from URL \u005c"%(url)s\u005c" failed, please see the log for details."), {url: url});\u000a                        } else {\u000a                            textError = _.sprintf(gettext("Installing the plugin from URL \u005c"%(url)s\u005c" failed, please see the log for details."), {url: url});\u000a                        }\u000a                    }\u000a\u000a                } else if (action == "uninstall") {\u000a                    if (data.hasOwnProperty("plugin")) {\u000a                        name = data.plugin.name;\u000a                    }\u000a\u000a                    titleSuccess = _.sprintf(gettext("Plugin \u005c"%(name)s\u005c" uninstalled"), {name: name});\u000a                    textSuccess = gettext("The plugin was uninstalled successfully");\u000a                    textRestart = gettext("The plugin was uninstalled successfully, however a restart of 3DRaion is needed for that to take effect.");\u000a                    textReload = gettext("The plugin was uninstalled successfully, however a reload of the page is needed for that to take effect.");\u000a\u000a                    titleError = gettext("Something went wrong");\u000a                    if (data.hasOwnProperty("reason")) {\u000a                        textError = _.sprintf(gettext("Uninstalling the plugin failed: %(reason)s"), {reason: data.reason});\u000a                    } else {\u000a                        textError = gettext("Uninstalling the plugin failed, please see the log for details.");\u000a                    }\u000a\u000a                } else if (action == "enable") {\u000a                    if (data.hasOwnProperty("plugin")) {\u000a                        name = data.plugin.name;\u000a                    }\u000a\u000a                    titleSuccess = _.sprintf(gettext("Plugin \u005c"%(name)s\u005c" enabled"), {name: name});\u000a                    textSuccess = gettext("The plugin was enabled successfully.");\u000a                    textRestart = gettext("The plugin was enabled successfully, however a restart of 3DRaion is needed for that to take effect.");\u000a                    textReload = gettext("The plugin was enabled successfully, however a reload of the page is needed for that to take effect.");\u000a\u000a                    titleError = gettext("Something went wrong");\u000a                    if (data.hasOwnProperty("reason")) {\u000a                        textError = _.sprintf(gettext("Toggling the plugin failed: %(reason)s"), {reason: data.reason});\u000a                    } else {\u000a                        textError = gettext("Toggling the plugin failed, please see the log for details.");\u000a                    }\u000a\u000a                } else if (action == "disable") {\u000a                    if (data.hasOwnProperty("plugin")) {\u000a                        name = data.plugin.name;\u000a                    }\u000a\u000a                    titleSuccess = _.sprintf(gettext("Plugin \u005c"%(name)s\u005c" disabled"), {name: name});\u000a                    textSuccess = gettext("The plugin was disabled successfully.");\u000a                    textRestart = gettext("The plugin was disabled successfully, however a restart of 3DRaion is needed for that to take effect.");\u000a                    textReload = gettext("The plugin was disabled successfully, however a reload of the page is needed for that to take effect.");\u000a\u000a                    titleError = gettext("Something went wrong");\u000a                    if (data.hasOwnProperty("reason")) {\u000a                        textError = _.sprintf(gettext("Toggling the plugin failed: %(reason)s"), {reason: data.reason});\u000a                    } else {\u000a                        textError = gettext("Toggling the plugin failed, please see the log for details.");\u000a                    }\u000a\u000a                } else {\u000a                    return;\u000a                }\u000a\u000a                self._displayNotification(data, titleSuccess, textSuccess, textRestart, textReload, titleError, textError);\u000a                self.requestData();\u000a            }\u000a        };\u000a    }\u000a\u000a    // view model class, parameters for constructor, container to bind to\u000a    ADDITIONAL_VIEWMODELS.push([PluginManagerViewModel, ["loginStateViewModel", "settingsViewModel", "printerStateViewModel"], "#settings_plugin_pluginmanager"]);\u000a});\u000a\u000a;\u000a
p0
.